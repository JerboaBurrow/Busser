{"files":[{"path":["/","home","jerboa","Busser","src","config.rs"],"content":"use std::path::Path;\n\nuse serde::{Serialize, Deserialize};\n\nuse crate::{util::read_file_utf8, web::discord::request::model::Webhook};\n\n/// Configure the stats collection\n/// - ```save_period_seconds```: periodically save to disc\n/// - ```path```: where to save to disc (time-stamped files)\n/// - ```hit_cooloff_seconds```: cooloff period after which the same IP is counted as a new hit\n/// - ```clear_period_seconds```: periodcially clear data in memory\n/// - ```digest_period_seconds```: periodically send a digts to a Discord webhook\n/// - ```log_files_clear_period_seconds```:archive and clear stats log files periodically\n/// - ```ignore_regexes```: collect, but do not report, hits on these regexes\n/// - ```top_n_digest```: top n listing of pages and resources in API/discord default is 3\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct StatsConfig\n{\n    pub save_period_seconds: u64,\n    pub path: String,\n    pub hit_cooloff_seconds: u64,\n    pub digest_period_seconds: u64,\n    pub log_files_clear_period_seconds: u64,\n    pub ignore_regexes: Option<Vec<String>>,\n    pub top_n_digest: Option<usize>\n}\n\npub const CONFIG_PATH: &str = \"config.json\";\n\n/// Configure the IP throttler\n/// - ```max_requests_per_second```: includes all requests to html and resources per second per ip\n/// - ```timeout_millis```: a cool off period between IP-blocks\n/// - ```clear_period_seconds```: time period to clear all stored IPs\n#[derive(Clone, Serialize, Deserialize)]\npub struct ThrottleConfig\n{\n    pub max_requests_per_second: f64,\n    pub timeout_millis: u128,\n    pub clear_period_seconds: u64\n}\n\n/// Configure content settings\n/// - ```path```: path to site data\n/// - ```home```: path to home page served on /\n/// - ```allow_without_extension```: allow serving without .html\n/// - ```cache_period_seconds: u16```: page/resource max cache age\n/// - ```ignore_regexes: Option<Vec<String>>```: do not serve content matching any of these patterns\n#[derive(Clone, Serialize, Deserialize)]\npub struct ContentConfig\n{\n    pub path: String,\n    pub home: String,\n    pub allow_without_extension: bool,\n    pub ignore_regexes: Option<Vec<String>>,\n    pub cache_period_seconds: u16\n}\n\n/// Configure the server\n/// - ```port_https```: https port to serve on\n/// - ```port_http```: http port to serve on\n/// - ```notification_endpoint```: currently unspported Discord webhook\n/// - ```cert_path```: ssl certificate\n/// - ```key_path```: ssl key\n/// - ```domain```: domain name for https redirect etc.\n/// - ```throttle```: [ThrottleConfig]\n/// - ```stats```: [StatsConfig]\n/// - ```content```: [ContentConfig]\n/// - ```api_token```: token to use for the server's POST api\n#[derive(Clone, Serialize, Deserialize)]\npub struct Config\n{\n    pub port_https: u16,\n    pub port_http: u16,\n    pub notification_endpoint: Webhook,\n    pub cert_path: String,\n    pub key_path: String,\n    pub domain: String,\n    pub throttle: ThrottleConfig,\n    pub stats: StatsConfig,\n    pub content: ContentConfig,\n    pub api_token: String\n}\n\n#[derive(Clone)]\npub struct AppState\n{\n\n}\n\nimpl AppState\n{\n    pub fn new() -> AppState\n    {\n        AppState {}\n    } \n}\n\npub fn read_config() -> Option<Config>\n{\n    if Path::new(CONFIG_PATH).exists()\n    {\n        let data = match read_file_utf8(CONFIG_PATH)\n        {\n            Some(d) => d,\n            None =>\n            {\n                println!(\"Error reading configuration file {} no data\", CONFIG_PATH);\n                return None\n            }\n        };\n\n        let config: Config = match serde_json::from_str(&data)\n        {\n            Ok(data) => {data},\n            Err(why) => \n            {\n                println!(\"Error reading configuration file {}\\n{}\", CONFIG_PATH, why);\n                return None\n            }\n        };\n\n        Some(config)\n    }\n    else \n    {\n        println!(\"Error configuration file {} does not exist\", CONFIG_PATH);\n        None\n    }\n}","traces":[{"line":98,"address":[3299248,3300281],"length":1,"stats":{"Line":0},"fn_name":"read_config"},{"line":100,"address":[3299265,3299445],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[3273495],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[3299662],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[2996424],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[3299650],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[3273835,3273767],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[3299832],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[3299897],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[3300142],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[3334655],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[3299863],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[3299364],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[3299438],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":14},{"path":["/","home","jerboa","Busser","src","lib.rs"],"content":"use semver::{BuildMetadata, Prerelease, Version};\n\npub mod web;\npub mod server;\npub mod util;\npub mod pages;\npub mod resources;\npub mod config;\n\nconst MAJOR: &str = env!(\"CARGO_PKG_VERSION_MAJOR\");\nconst MINOR: &str = env!(\"CARGO_PKG_VERSION_MINOR\");\nconst PATCH: &str = env!(\"CARGO_PKG_VERSION_PATCH\");\n\nconst RESOURCE_REGEX: &str = r\"(\\.\\S+)\";\nconst HTML_REGEX: &str = r\"(\\.html)$\";\nconst NO_EXTENSION_REGEX: &str = r\"^(?!.*\\.).*\";\n\n// only modified in main.rs on launch\npub struct RuntimeOptions\n{\n    pub debug: bool,\n    pub debug_timestamp: bool\n}\n\npub static mut OPTIONS: RuntimeOptions = RuntimeOptions { debug: false, debug_timestamp: false };\n\npub fn debug(msg: String, context: Option<String>)\n{\n    unsafe { if OPTIONS.debug == false { return } }\n\n    let mut message = String::new();\n\n    let time = chrono::offset::Utc::now().to_rfc3339();\n\n\n\n    let tag = match context\n    {\n        Some(s) => format!(\"[{s}] \"),\n        None => format!(\"[DEBUG] \")\n    };\n\n    for line in msg.split(\"\\n\")\n    {\n        unsafe { if OPTIONS.debug_timestamp { message.push_str(&format!(\"{time} \")); } }\n        message.push_str(&tag);\n        message.push_str(line);\n        message.push_str(\"\\n\");\n    }\n\n    print!(\"{message}\");\n}\n\npub fn program_version() -> Version \n{\n    Version\n    {\n        major: MAJOR.parse().unwrap(),\n        minor: MINOR.parse().unwrap(),\n        patch: PATCH.parse().unwrap(),\n        pre: Prerelease::EMPTY,\n        build: BuildMetadata::EMPTY\n    }\n}","traces":[{"line":27,"address":[3825113,3825301,3825344,3825182,3825365,3825296,3825685,3825081,3825542,3825056,3825680],"length":1,"stats":{"Line":1},"fn_name":"fmt"},{"line":29,"address":[3428583],"length":1,"stats":{"Line":1},"fn_name":null},{"line":31,"address":[9319984,9320075,9320004],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":33,"address":[3428714,3428774],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[3428809],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[9320032],"length":1,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[3825599,3825627,3825563,3825173],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[3429609,3429103,3429365],"length":1,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[21144955],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[3429844,3430191],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[3430216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[3430223],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[3429683],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[22578736,22578692,22578755],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":58,"address":[3430398],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[3430444],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[3430490],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":17},{"path":["/","home","jerboa","Busser","src","main.rs"],"content":"use busser::server::http::ServerHttp;\nuse busser::server::https::Server;\nuse busser::program_version;\n\nuse tokio::task::spawn;\n\n#[tokio::main]\nasync fn main() {\n\n    let args: Vec<String> = std::env::args().collect();\n \n    if args.iter().any(|x| x == \"-v\")\n    {\n        println!(\"Version: {}\", program_version());\n        std::process::exit(0);\n    }\n\n    if args.iter().any(|x| x == \"-d\")\n    {\n        unsafe { busser::OPTIONS.debug = true; }\n    }\n\n    if args.iter().any(|x| x == \"-t\")\n    {\n        unsafe { busser::OPTIONS.debug_timestamp = true; }\n    }\n\n    let insert_tag = if args.iter().any(|x| x == \"--no-tagging\")\n    {\n        false\n    }\n    else\n    {\n        true\n    };\n    \n    let server = Server::new(0,0,0,0, insert_tag);\n\n    let http_server = ServerHttp::new(0,0,0,0);\n\n    let _http_redirect = spawn(http_server.serve());\n\n    server.serve().await;\n\n}","traces":[{"line":8,"address":[3444576,3444176],"length":1,"stats":{"Line":0},"fn_name":"main"},{"line":10,"address":[2737615,2737744],"length":1,"stats":{"Line":0},"fn_name":null},{"line":12,"address":[2739486,2737862,2737767,2739472],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":14,"address":[2738950,2737991],"length":1,"stats":{"Line":0},"fn_name":null},{"line":15,"address":[2739099],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[2738168,2739534,2739520,2737956,2738029],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":20,"address":[2738158],"length":1,"stats":{"Line":0},"fn_name":null},{"line":23,"address":[2738123,2738302,2739582,2738186,2739568],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":25,"address":[2738291],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[2738262,2739630,2739616,2738314],"length":1,"stats":{"Line":0},"fn_name":"{closure#3}"},{"line":34,"address":[2738384],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[2738398,2738479],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[2738494],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[2738570],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[2737597,2738654,2738792,2739185,2737679],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":15},{"path":["/","home","jerboa","Busser","src","pages","mod.rs"],"content":"use regex::Regex;\n\nuse crate::{util::{list_dir_by, list_sub_dirs, read_file_utf8}, HTML_REGEX};\n\nuse self::page::Page;\n\npub mod page;\n\n/// Scan the path (if None the current dir) for .html pages\n///   note Busser can be configured to server .html pages without\n///   the extension, but for scanning the extension is required.\n/// \n/// # Example\n/// ```rust\n/// // with files pages/index.html, pages/animation.js\n/// \n/// use busser::pages::{get_pages, page::Page};\n/// \n/// pub fn main()\n/// {\n///     let pages = get_pages(Some(\"pages\"), Some(3600));\n/// \n///     // assert_eq!(pages.len(), 1);\n///     // assert!(pages.contains(&Page::new(\"pages/index.html\", \"\")));\n///     // assert!(!pages.contains(&Page::new(\"pages/animation.js\", \"\")));\n/// }\n/// ``` \npub fn get_pages(path: Option<&str>, cache_period_seconds: Option<u16>) -> Vec<Page>\n{\n    let scan_path = match path\n    {\n        Some(s) => s,\n        None => \"\"\n    };\n\n    let html_regex = Regex::new(HTML_REGEX).unwrap();\n    let page_paths = list_dir_by(Some(html_regex), scan_path.to_string());\n    let mut pages: Vec<Page> = vec![];\n\n    let cache = match cache_period_seconds\n    {\n        Some(p) => p,\n        None => 3600\n    };\n\n    for page_path in page_paths\n    {\n        let data = match read_file_utf8(&page_path)\n        {\n            Some(data) => data,\n            None => continue\n        };\n\n        pages.push(Page::new(page_path.as_str(), data.as_str(), cache));\n    }\n\n    let dirs = list_sub_dirs(scan_path.to_string());\n\n    if !dirs.is_empty()\n    {\n        for dir in dirs\n        {\n            for page in get_pages(Some(&dir), cache_period_seconds)\n            {\n                pages.push(page);\n            }\n        }\n    }\n\n    pages\n\n}","traces":[{"line":28,"address":[3092032,3093878,3094405],"length":1,"stats":{"Line":1},"fn_name":"get_pages"},{"line":30,"address":[2880703],"length":1,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[2880790],"length":1,"stats":{"Line":1},"fn_name":null},{"line":33,"address":[2880761],"length":1,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[4552992],"length":1,"stats":{"Line":1},"fn_name":null},{"line":37,"address":[2880891,2882979],"length":1,"stats":{"Line":1},"fn_name":null},{"line":38,"address":[4553226],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[3092502],"length":1,"stats":{"Line":1},"fn_name":null},{"line":42,"address":[3092536],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[2881136],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[3092560,3092668],"length":1,"stats":{"Line":2},"fn_name":null},{"line":48,"address":[3094021,3092891],"length":1,"stats":{"Line":2},"fn_name":null},{"line":50,"address":[3094091],"length":1,"stats":{"Line":1},"fn_name":null},{"line":54,"address":[3094163,3094251],"length":1,"stats":{"Line":2},"fn_name":null},{"line":57,"address":[2881507],"length":1,"stats":{"Line":1},"fn_name":null},{"line":59,"address":[3092977,3093045],"length":1,"stats":{"Line":2},"fn_name":null},{"line":61,"address":[3093051,3093185],"length":1,"stats":{"Line":2},"fn_name":null},{"line":63,"address":[3093482,3093411],"length":1,"stats":{"Line":2},"fn_name":null},{"line":65,"address":[3093824,3093873],"length":1,"stats":{"Line":2},"fn_name":null},{"line":70,"address":[3093123],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":18,"coverable":20},{"path":["/","home","jerboa","Busser","src","pages","page.rs"],"content":"use std::cmp::min;\n\nuse axum::response::{IntoResponse, Response, Html};\nuse regex::Regex;\nuse serde::{Serialize, Deserialize};\n\nuse crate::util::read_file_utf8;\n\n/// An HTML webpage with a uri and body\n/// \n/// A Page may also be converted into an Axum HTML response via\n/// ```rust page.into_response()```\n/// # Example\n/// ```rust\n/// use busser::pages::page::Page;\n/// \n/// pub fn main()\n/// {\n/// \n///     let page = Page::new(\"index.html\", \"<p>Welcome!</p>\", 3600);\n/// \n///     println!(\"{}\",page.preview(64));\n/// }\n/// ``` \n#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\npub struct Page\n{\n    uri: String,\n    body: String,\n    cache_period_seconds: u16\n}\n\nimpl Page\n{\n    pub fn new(uri: &str, body: &str, cache: u16) -> Page\n    {\n        Page { uri: uri.to_string(), body: body.to_string(), cache_period_seconds: cache }\n    }\n\n    pub fn from_file(path: String, cache_period_seconds: u16) -> Option<Page>\n    {\n        match read_file_utf8(&path)\n        {\n            Some(data) => Some(Page::new(path.as_str(), data.as_str(), cache_period_seconds)),\n            None => None\n        }\n    }\n\n    pub fn error(text: &str) -> Page\n    {\n        Page::new(\"/\", text, 3600)\n    }\n\n    pub fn get_uri(&self) -> String\n    {\n        self.uri.clone()\n    }\n\n    pub fn preview(&self, n: usize) -> String\n    {\n        format!(\"uri: {}, body: {} ...\", self.get_uri(), self.body[1..min(n, self.body.len())].to_string())\n    }\n\n    /// Insert a tag indicating the page was served by busser\n    /// this may be disabled by launching as busser --no-tagging\n    pub fn insert_tag(&mut self)\n    {   \n        let head = Regex::new(r\"<head>\").unwrap();\n        let tag = r#\"<head><meta name=\"hostedby\" content=\"Busser, https://github.com/JerboaBurrow/Busser\">\"#;\n        let tag_no_head = r#\"<html><head><meta name=\"hostedby\" content=\"Busser, https://github.com/JerboaBurrow/Busser\"></head>\"#;\n        match head.clone().captures_iter(&self.body).count()\n        {\n            0 => \n            {\n                self.body = self.body.replacen(\"<html>\", tag_no_head, 1);\n            },\n            _ => \n            {\n                self.body = self.body.replacen(\"<head>\", tag, 1);\n            }\n        }\n    }\n}\n\nimpl IntoResponse for Page {\n    fn into_response(self) -> Response {\n        let mut response = Html(self.body).into_response();\n        let time_stamp = chrono::offset::Utc::now().to_rfc3339();\n        response.headers_mut().insert(\"date\", time_stamp.parse().unwrap());\n        response.headers_mut().insert(\"cache-control\", format!(\"public, max-age={}\", self.cache_period_seconds).parse().unwrap());\n        response\n    }\n}\n\npub fn is_page(uri: &str, domain: &str) -> bool\n{\n\n    let domain_escaped = domain.replace(\"https://\", \"\").replace(\"http://\", \"\").replace(\".\", r\"\\.\");\n    match Regex::new(format!(r\"((^|(http)(s|)://){})(/|/[^\\.]+|/[^\\.]+.html|$)$\",domain_escaped).as_str())\n    {\n        Ok(re) => \n        {\n            re.is_match(uri)\n        },\n        Err(_e) => {false}\n    }\n}","traces":[{"line":35,"address":[2738944,2739158],"length":1,"stats":{"Line":1},"fn_name":null},{"line":37,"address":[2723733],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[2724357,2723904],"length":1,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[2724018,2723950],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[2724079,2724146],"length":1,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[2724065],"length":1,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[2724384],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[2724411],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[2739728],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[2739745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[2740530,2739776],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[2724918,2724539,2724633],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[2725280,2726145],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[2725342],"length":1,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[2725292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[2725313],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[2725479,2725570,2725423],"length":1,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[2725613,2725673],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[2741171,2740919],"length":1,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[2742494,2742524,2741456],"length":1,"stats":{"Line":0},"fn_name":"into_response"},{"line":87,"address":[2741607,2741478],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[2741615,2741672],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[2741699,2741769],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[2741912,2742017],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[2742346],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[2743708,2742544,2743622],"length":1,"stats":{"Line":1},"fn_name":"is_page"},{"line":98,"address":[2742619],"length":1,"stats":{"Line":1},"fn_name":null},{"line":99,"address":[2743130,2743321],"length":1,"stats":{"Line":2},"fn_name":null},{"line":101,"address":[2743379],"length":1,"stats":{"Line":1},"fn_name":null},{"line":103,"address":[2743419,2743534],"length":1,"stats":{"Line":2},"fn_name":null},{"line":105,"address":[2743430],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":7,"coverable":31},{"path":["/","home","jerboa","Busser","src","resources","mod.rs"],"content":"pub mod resource;\n\nuse regex::Regex;\n\nuse crate::{util::{list_dir_by, list_sub_dirs, read_file_bytes}, HTML_REGEX, RESOURCE_REGEX};\n\nuse self::resource::{content_type, Resource};\n\n/// Scan the path (if None the current dir) for non .html resources\n/// \n/// # Example\n/// ```rust\n/// // with files resources/index.html, resources/animation.js\n/// \n/// use busser::resources::{get_resources, resource::Resource};\n/// \n/// pub fn main()\n/// {\n///     let resources = get_resources(Some(\"resources\"), Some(3600));\n/// \n///     // assert_eq!(resources.len(), 1);\n///     // assert!(!resources.contains(&Resource::new(\"resources/index.html\", \"\")));\n///     // assert!(resources.contains(&Resource::new(\"resources/animation.js\", \"\")));\n/// }\n/// ``` \npub fn get_resources(path: Option<&str>, cache_period_seconds: Option<u16>) -> Vec<Resource>\n{\n    let scan_path = match path\n    {\n        Some(s) => s,\n        None => \"\"\n    };\n\n    let resource_regex = Regex::new(RESOURCE_REGEX).unwrap();\n    let html_regex = Regex::new(HTML_REGEX).unwrap();\n\n    let resource_paths = list_dir_by(Some(resource_regex), scan_path.to_string());\n    let mut resources: Vec<Resource> = vec![];\n\n    let cache = match cache_period_seconds\n    {\n        Some(p) => p,\n        None => 3600\n    };\n\n    for resource_path in resource_paths\n    {\n        match html_regex.find_iter(resource_path.as_str()).count()\n        {\n            0 => {},\n            _ => {continue}\n        }\n\n        let data = match read_file_bytes(&resource_path)\n        {\n            Some(data) => data,\n            None => continue\n        };\n\n        resources.push(Resource::new(resource_path.as_str(), data, content_type(resource_path.to_string()), cache));\n    }\n\n    let dirs = list_sub_dirs(scan_path.to_string());\n\n    if !dirs.is_empty()\n    {\n        for dir in dirs\n        {\n            for resource in get_resources(Some(&dir), cache_period_seconds)\n            {\n                resources.push(resource);\n            }\n        }\n    }\n\n    resources\n\n}","traces":[{"line":26,"address":[3041771,3038896,3040895],"length":1,"stats":{"Line":1},"fn_name":"get_resources"},{"line":28,"address":[3038955],"length":1,"stats":{"Line":1},"fn_name":null},{"line":30,"address":[3039069],"length":1,"stats":{"Line":1},"fn_name":null},{"line":31,"address":[3039040],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[3039117],"length":1,"stats":{"Line":1},"fn_name":null},{"line":35,"address":[3039206,3039271],"length":1,"stats":{"Line":2},"fn_name":null},{"line":37,"address":[3039301,3041764],"length":1,"stats":{"Line":1},"fn_name":null},{"line":38,"address":[3116880],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[3116940],"length":1,"stats":{"Line":1},"fn_name":null},{"line":42,"address":[3116974],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[3116962],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[3117106,3116998],"length":1,"stats":{"Line":2},"fn_name":null},{"line":48,"address":[3039937,3041084],"length":1,"stats":{"Line":2},"fn_name":null},{"line":54,"address":[3118570,3118619],"length":1,"stats":{"Line":2},"fn_name":null},{"line":56,"address":[3118677],"length":1,"stats":{"Line":1},"fn_name":null},{"line":60,"address":[3118757,3118835,3119109],"length":1,"stats":{"Line":2},"fn_name":null},{"line":63,"address":[3117349],"length":1,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[3117483,3117415],"length":1,"stats":{"Line":2},"fn_name":null},{"line":67,"address":[3117489,3117626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[3117852,3117923],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[3118330,3118281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[3117564],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":17,"coverable":22},{"path":["/","home","jerboa","Busser","src","resources","resource.rs"],"content":"use std::{cmp::min, collections::HashMap};\n\nuse axum::response::{Html, IntoResponse, Response};\nuse regex::Regex;\nuse serde::{Serialize, Deserialize};\n\n/// An non-HTML resource with a uri, byte body, and MIME type\n/// \n/// A resource may also be converted into an Axum HTML response via\n/// ```rust resource.into_response()```\n/// # Example\n/// ```rust\n/// use busser::resources::resource::Resource;\n/// \n/// pub fn main()\n/// {\n/// \n///     let res = Resource::new\n///     (\n///         \"index.js\", \n///         \"console.log(\\\"Hello, World!\\\")\".as_bytes().to_vec(), \n///         \"text/javascript\",\n///         3600\n///     );\n/// \n///     println!(\"{}\",res.preview(64));\n/// }\n/// ``` \n#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\npub struct Resource\n{\n    uri: String,\n    body: Vec<u8>,\n    content_type: String,\n    cache_period_seconds: u16\n}\n\n/// Identifies the MIME type by file extension, no attempt is made to verify the file's content\n/// \n/// Supported MIME types in Busser, default is ```not-rust \"application/octet-stream\"```\n/// ```rust\n/// use std::collections::HashMap;\n/// let content_types = HashMap::from\n/// ( \n///     [\n///         (r\"\\.txt$\", \"text/plain\"),\n///         (r\"\\.css$\", \"text/css\"),\n///         (r\"\\.csv$\", \"text/csv\"),\n///         (r\"\\.(javascript|js)$\", \"text/javascript\"),\n///         (r\"\\.xml$\", \"text/xml\"),\n///         (r\"\\.gif$\", \"image/gif\"),   \n///         (r\"\\.(jpg|jpeg)$\", \"image/jpeg\"),   \n///         (r\"\\.png$\", \"image/png\"),   \n///         (r\"\\.tiff$\", \"image/tiff\"),      \n///         (r\"\\.ico$\", \"image/x-icon\"),  \n///         (r\"\\.(djvu)|(djv)$\", \"image/vnd.djvu\"),  \n///         (r\"\\.svg$\", \"image/svg+xml\"),\n///         (r\"\\.(mpeg|mpg|mp2|mpe|mpv|m2v)$\", \"video/mpeg\"),    \n///         (r\"\\.(mp4|m4v)$\", \"video/mp4\"),    \n///         (r\"\\.(qt|mov)$\", \"video/quicktime\"),    \n///         (r\"\\.(wmv)$\", \"video/x-ms-wmv\"),    \n///         (r\"\\.(flv|f4v|f4p|f4a|f4b)$\", \"video/x-flv\"),   \n///         (r\"\\.webm$\", \"video/webm\")    \n///     ]\n/// );\n/// ```\npub fn content_type(extension: String) -> &'static str\n{\n    let content_types = HashMap::from\n    ( \n        [\n            (r\"\\.txt$\", \"text/plain\"),\n            (r\"\\.css$\", \"text/css\"),\n            (r\"\\.csv$\", \"text/csv\"),\n            (r\"\\.(javascript|js)$\", \"text/javascript\"),\n            (r\"\\.xml$\", \"text/xml\"),\n            (r\"\\.gif$\", \"image/gif\"),   \n            (r\"\\.(jpg|jpeg)$\", \"image/jpeg\"),   \n            (r\"\\.png$\", \"image/png\"),   \n            (r\"\\.tiff$\", \"image/tiff\"),      \n            (r\"\\.ico$\", \"image/x-icon\"),  \n            (r\"\\.(djvu)|(djv)$\", \"image/vnd.djvu\"),  \n            (r\"\\.svg$\", \"image/svg+xml\"),\n            (r\"\\.(mpeg|mpg|mp2|mpe|mpv|m2v)$\", \"video/mpeg\"),    \n            (r\"\\.(mp4|m4v)$\", \"video/mp4\"),    \n            (r\"\\.(qt|mov)$\", \"video/quicktime\"),    \n            (r\"\\.(wmv)$\", \"video/x-ms-wmv\"),    \n            (r\"\\.(flv|f4v|f4p|f4a|f4b)$\", \"video/x-flv\"),   \n            (r\"\\.webm$\", \"video/webm\")    \n        ]\n    );\n\n    for (re, content) in content_types\n    {\n        if Regex::new(re).unwrap().is_match(&extension)\n        {\n            return content\n        }\n    }\n\n    \"application/octet-stream\"\n}\n\nimpl Resource\n{\n    pub fn new(uri: &str, body: Vec<u8>, content_type: &str, cache: u16) -> Resource\n    {\n        Resource { uri: uri.to_string(), body, content_type: content_type.to_string(), cache_period_seconds: cache }\n    }\n\n    pub fn get_uri(&self) -> String\n    {\n        self.uri.clone()\n    }\n\n    pub fn get_bytes(&self) -> Vec<u8>\n    {\n        self.body.clone()\n    }\n\n    pub fn preview(&self, n: usize) -> String\n    {\n        let preview_body = match self.body.len() > 0\n        {\n            true => self.body[1..min(n, self.body.len())].to_vec(),\n            false => vec![]\n        };\n\n        format!(\"uri: {}, type: {}, bytes: {:?} ...\", self.get_uri(), self.content_type, preview_body)\n    }\n}\n\n/// Serves an Html response with the given MIME type\nimpl IntoResponse for Resource {\n    fn into_response(self) -> Response {\n        let mut response = Html(self.body).into_response();\n        response.headers_mut().insert(\"content-type\", self.content_type.parse().unwrap());\n        let time_stamp = chrono::offset::Utc::now().to_rfc3339();\n        response.headers_mut().insert(\"date\", time_stamp.parse().unwrap());\n        response.headers_mut().insert(\"cache-control\", format!(\"public, max-age={}\", self.cache_period_seconds).parse().unwrap());\n        response\n    }\n}","traces":[{"line":67,"address":[2669168,2671334],"length":1,"stats":{"Line":1},"fn_name":"content_type"},{"line":72,"address":[2669180],"length":1,"stats":{"Line":1},"fn_name":null},{"line":73,"address":[2669234],"length":1,"stats":{"Line":1},"fn_name":null},{"line":74,"address":[2669288],"length":1,"stats":{"Line":1},"fn_name":null},{"line":75,"address":[2669342],"length":1,"stats":{"Line":1},"fn_name":null},{"line":76,"address":[2669396],"length":1,"stats":{"Line":1},"fn_name":null},{"line":77,"address":[2669450],"length":1,"stats":{"Line":1},"fn_name":null},{"line":78,"address":[2669504],"length":1,"stats":{"Line":1},"fn_name":null},{"line":79,"address":[2669558],"length":1,"stats":{"Line":1},"fn_name":null},{"line":80,"address":[2669612],"length":1,"stats":{"Line":1},"fn_name":null},{"line":81,"address":[2669666],"length":1,"stats":{"Line":1},"fn_name":null},{"line":82,"address":[2669720],"length":1,"stats":{"Line":1},"fn_name":null},{"line":83,"address":[2669774],"length":1,"stats":{"Line":1},"fn_name":null},{"line":84,"address":[2669828],"length":1,"stats":{"Line":1},"fn_name":null},{"line":85,"address":[2669882],"length":1,"stats":{"Line":1},"fn_name":null},{"line":86,"address":[2669936],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[2669990],"length":1,"stats":{"Line":1},"fn_name":null},{"line":88,"address":[2670044],"length":1,"stats":{"Line":1},"fn_name":null},{"line":89,"address":[2670098],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[2671299,2670787],"length":1,"stats":{"Line":2},"fn_name":null},{"line":95,"address":[2671099,2671030],"length":1,"stats":{"Line":2},"fn_name":null},{"line":97,"address":[2671289],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[2671054],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[2671706,2671360,2671736],"length":1,"stats":{"Line":1},"fn_name":null},{"line":108,"address":[2671437,2671717,2671521],"length":1,"stats":{"Line":2},"fn_name":null},{"line":111,"address":[2671776],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[2671793],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[2671824],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[2671841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[2672713,2671872],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[2671923],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[2671960],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[2671939],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[2672210,2672072,2672471],"length":1,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[2672752,2674029],"length":1,"stats":{"Line":0},"fn_name":"into_response"},{"line":136,"address":[2672903,2672774],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[2672975,2672911],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[2673122],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[2673168,2673241],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[2673384,2673489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[2673816],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":24,"coverable":41},{"path":["/","home","jerboa","Busser","src","server","api","mod.rs"],"content":"pub mod stats;\n\nuse std::sync::Arc;\n\nuse axum::{\n    body::Bytes, extract::State, http::{HeaderMap, Request}, middleware::Next, response::Response\n};\nuse reqwest::StatusCode;\nuse tokio::sync::Mutex;\n\nuse crate::web::stats::Stats;\n\n/// A trait representing an API request to the server\n///  - For example [crate::server::api::stats::StatsDigest]\npub trait ApiRequest\n{\n    /// Validate a request's hmac given a token read from config.json \n    ///   - See [crate::config::Config] and [crate::web::is_authentic]\n    fn is_authentic(headers: HeaderMap, body: Bytes) -> StatusCode;\n    /// Deserialise the Bytes body from JSON\n    fn deserialise_payload(&mut self, headers: HeaderMap, body: Bytes) -> StatusCode;\n    /// Formulate a response form the server returned as a String\n    ///   - Also perform any actions inherent to this Api call\n    async fn into_response(&self, stats: Option<Stats>) -> (Option<String>, StatusCode);\n    /// Axum middleware to \n    ///     1. check headers for an api request type\n    ///     2. authenticate the request (HMAC)\n    ///     3. respond to it\n    ///     4. continue on to the next reqeust\n    async fn filter<B>\n    (\n        stats: State<Option<Arc<Mutex<Stats>>>>,\n        headers: HeaderMap,\n        request: Request<B>,\n        next: Next<B>\n    ) -> Result<Response, StatusCode>\n    where B: axum::body::HttpBody<Data = Bytes>;\n\n}","traces":[],"covered":0,"coverable":0},{"path":["/","home","jerboa","Busser","src","server","api","stats.rs"],"content":"use std::{str::from_utf8, sync::Arc};\n\nuse axum::{body::Bytes, extract::State, http::{HeaderMap, Request}, middleware::Next, response::{IntoResponse, Response}};\nuse chrono::DateTime;\nuse reqwest::StatusCode;\nuse serde::Deserialize;\nuse tokio::sync::Mutex;\n\nuse crate::{config::read_config, web::{discord::request::post::post, is_authentic, stats::{self, Stats}}};\n\nuse super::ApiRequest;\n\n/// Payload for [StatsDigest] Api request\n///  - ```from_utc```: takes a utc date to compile statistics from\n///  - ```to_utc```: takes a utc date to compile statistics to\n///  - ```post_discord```: whether to post to dicsord or not\n#[derive(Deserialize)]\npub struct StatsDigestPayload\n{\n    from_utc: Option<String>,\n    to_utc: Option<String>,\n    post_discord: bool\n}\n\n/// Payload for [StatsDigest] Api request, see [StatsDigestPayload]\n///  - Takes a utc date to compile statistics from, and a switch to post a discord message\n///  - All saved hit statistics after from_utc will be included\npub struct StatsDigest \n{\n    payload: StatsDigestPayload\n}\n\nimpl StatsDigest\n{\n    pub fn new() -> StatsDigest\n    {\n        StatsDigest \n        { \n            payload: StatsDigestPayload \n            {\n                from_utc: None,\n                to_utc: None,\n                post_discord: false\n            } \n        }\n    }\n}\n\nimpl ApiRequest for StatsDigest\n{\n    fn is_authentic(headers: HeaderMap, body: Bytes) -> StatusCode\n    {\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                return StatusCode::INTERNAL_SERVER_ERROR;\n            }\n        };\n\n        is_authentic\n        (\n            headers, \n            \"busser-token\", \n            config.api_token, \n            body\n        )\n    }\n\n    fn deserialise_payload(&mut self, _headers: HeaderMap, body: Bytes) -> StatusCode\n    {\n        \n        self.payload = match from_utf8(&body)\n        {\n            Ok(s) => \n            {\n                match serde_json::from_str(s)\n                {\n                    Ok(p) => p,\n                    Err(e) =>\n                    {\n                        crate::debug(format!(\"{} deserialising POST payload\",e), Some(\"Stats Digest\".to_string()));\n                        return StatusCode::BAD_REQUEST\n                    }\n                }\n            }\n            Err(e) => \n            {\n                crate::debug(format!(\"{} deserialising POST payload\",e), Some(\"Stats Digest\".to_string()));\n                return StatusCode::BAD_REQUEST\n            }\n        };\n\n        StatusCode::OK\n    }\n\n    async fn into_response(&self, stats: Option<Stats>) -> (Option<String>, StatusCode)\n    {\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                return (None, StatusCode::INTERNAL_SERVER_ERROR);\n            }\n        };\n\n        let from: Option<DateTime<chrono::Utc>> = match self.payload.from_utc.clone()\n        {\n            Some(s) =>\n            {\n                match DateTime::parse_from_rfc3339(&s)\n                {\n                    Ok(date) => Some(date.into()),\n                    Err(e) => \n                    {\n                        crate::debug(format!(\"Error {} parsing from_utc form StatsDigest POST payload\",e,), None);\n                        return (None, StatusCode::BAD_REQUEST) \n                    }\n                }\n            },\n            None => None\n        };\n\n        let to: Option<DateTime<chrono::Utc>> = match self.payload.to_utc.clone()\n        {\n            Some(s) =>\n            {\n                match DateTime::parse_from_rfc3339(&s)\n                {\n                    Ok(date) => Some(date.into()),\n                    Err(e) => \n                    {\n                        crate::debug(format!(\"Error {} parsing to_utc form StatsDigest POST payload\",e,), None);\n                        return (None, StatusCode::BAD_REQUEST) \n                    }\n                }\n            },\n            None => None\n        };\n\n        let digest = Stats::process_hits(config.stats.path, from,to,config.stats.top_n_digest,stats);\n        let msg = Stats::digest_message(digest, from, to);\n\n        if self.payload.post_discord\n        {\n            match post(config.notification_endpoint, msg.clone()).await\n            {\n                Ok(_s) => (),\n                Err(e) => {crate::debug(format!(\"Error posting to discord\\n{}\", e), None);}\n            }\n        }\n\n        (Some(msg), StatusCode::OK)\n    }\n\n    async fn filter<B>\n    (\n        State(stats): State<Option<Arc<Mutex<Stats>>>>,\n        headers: HeaderMap,\n        request: Request<B>,\n        next: Next<B>\n    ) -> Result<Response, StatusCode>\n    where B: axum::body::HttpBody<Data = Bytes>\n    {\n\n        if !headers.contains_key(\"api\")\n        {\n            return Ok(next.run(request).await)\n        }\n\n        let api = match std::str::from_utf8(headers[\"api\"].as_bytes())\n        {\n            Ok(u) => u,\n            Err(_) =>\n            {\n                crate::debug(\"no/mangled user agent\".to_string(), None);\n                return Ok(next.run(request).await)\n            }\n        };\n\n        match api == \"StatsDigest\"\n        {\n            true => {},\n            false => { return Ok(next.run(request).await) }\n        }\n\n        let body = request.into_body();\n        let bytes = match body.collect().await {\n            Ok(collected) => collected.to_bytes(),\n            Err(_) => {\n                return Err(StatusCode::BAD_REQUEST)\n            }\n        };\n\n        match StatsDigest::is_authentic(headers.clone(), bytes.clone())\n        {\n            StatusCode::ACCEPTED => {},\n            e => { return Ok(e.into_response()) }\n        }\n\n        let mut response = StatsDigest::new();\n\n        match response.deserialise_payload(headers, bytes)\n        {\n            StatusCode::OK => {},\n            e => { return Ok(e.into_response()) }\n        }\n\n        let (result, status) = if stats.is_none()\n        {\n            response.into_response(None).await\n        }\n        else\n        {\n            let stats_unwrapped = stats.unwrap();\n            let stats_lock = stats_unwrapped.lock().await;\n            let s = stats_lock.to_owned();\n            response.into_response(Some(s)).await\n        };\n        \n\n        match result\n        {\n            Some(s) => { Ok((s).into_response()) },\n            None => { Err(status) }\n        }\n    }\n\n}\n","traces":[{"line":35,"address":[3398432],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[3398462],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[3399472,3398560,3399630],"length":1,"stats":{"Line":0},"fn_name":"is_authentic"},{"line":54,"address":[3398577,3398677],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[3398780],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[3398708],"length":1,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[3398822],"length":1,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[3398901],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3398941],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[3401052,3399664,3400718],"length":1,"stats":{"Line":0},"fn_name":"deserialise_payload"},{"line":75,"address":[3399791,3400039,3399707,3400149,3400204],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[3399815],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[3399948,3399841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[3399978],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[3400053],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[3400696,3400388],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[3400651],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[3399857],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[3400739,3401030],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[3401002],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[3400251],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[2767344],"length":1,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[2767326,2767620,2767480],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[2767773],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[2767646],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[2767966,2767847],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[2768008],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[2768153,2768048],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[2768341,2768190],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[2768249],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[2769932],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[2770051],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[2767995],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[2768073,2768404],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[2768446],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[2768486,2768773],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[2768810,2768961],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[2768869],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[2769708],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[2769827],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[2768433],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[2768506],"length":1,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[2769024],"length":1,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[2769114],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[2693651],"length":1,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[2770581],"length":1,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[2770635,2770726],"length":1,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[2769124],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[2771680],"length":1,"stats":{"Line":0},"fn_name":"filter<hyper::body::body::Body>"},{"line":169,"address":[2772322,2772594],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[2695708],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[2772745,2772917],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[2772986],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[2773080,2773639],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[2695733],"length":1,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[2773117,2773040],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[2695758],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[2773268],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[2695783],"length":1,"stats":{"Line":0},"fn_name":null},{"line":192,"address":[2775795,2775519],"length":1,"stats":{"Line":0},"fn_name":null},{"line":193,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[2775681],"length":1,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[2775937,2775836,2777219,2775969],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[2776143,2777145],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[2776112],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[2776432,2776168],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[2776481,2776972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[2776446,2776510,2777938],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[2695808],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[2776516,2776647],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[2695833],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[2778278,2778365],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[2695858],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[2778015],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[2779075,2779236],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[2779053],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":81},{"path":["/","home","jerboa","Busser","src","server","http.rs"],"content":"use crate::\n{\n    config::read_config, web::throttle::{handle_throttle, IpThrottler}\n};\n\nuse std::net::{IpAddr, Ipv4Addr, SocketAddr};\nuse std::sync::Arc;\nuse tokio::sync::Mutex;\n\nuse axum::\n{\n    routing::get, \n    Router, \n    response::Redirect,\n    middleware\n};\n\n/// An http redirect server \n/// # Example\n/// ```no_run\n/// use busser::server::http::ServerHttp;\n/// use tokio::task::spawn;\n/// #[tokio::main]\n/// async fn main() \n/// {\n///     let http_server = ServerHttp::new(0,0,0,0);\n///     let _http_redirect = spawn(http_server.serve());\n/// }\n/// ```\npub struct ServerHttp\n{\n    addr: SocketAddr,\n    router: Router\n}\n\nimpl ServerHttp\n{\n    pub fn new \n    (\n        a: u8,\n        b: u8,\n        c: u8,\n        d: u8\n    ) \n    -> ServerHttp\n    {\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let requests: IpThrottler = IpThrottler::new\n        (\n            config.throttle.max_requests_per_second, \n            config.throttle.timeout_millis,\n            config.throttle.clear_period_seconds\n        );\n\n        let throttle_state = Arc::new(Mutex::new(requests));\n\n        let mut domain = config.domain;\n\n        domain = domain.replacen(\"http://\", \"https://\", 1);\n\n        if !domain.starts_with(\"https://\")\n        {\n            domain = \"https://\".to_string()+&domain\n        }\n        \n        ServerHttp\n        {\n            addr: SocketAddr::new(IpAddr::V4(Ipv4Addr::new(a,b,c,d)), config.port_http),\n            router: Router::new()\n            .route(\"/\", get(|| async move \n            {\n                    crate::debug(format!(\"http redirect to {}\", domain), None);\n                    Redirect::permanent(&domain)\n            }))\n            .layer(middleware::from_fn_with_state(throttle_state.clone(), handle_throttle))\n\n        }\n    }\n\n    pub fn get_addr(self: ServerHttp) -> SocketAddr\n    {\n        self.addr\n    }\n\n    pub async fn serve(self: ServerHttp)\n    {\n        axum::Server::bind(&self.addr)\n        .serve(self.router.into_make_service_with_connect_info::<SocketAddr>())\n        .await\n        .unwrap();\n    }\n\n}","traces":[{"line":38,"address":[3255923,3256740,3254736],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[3254817],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[3254955],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[4009777],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[4009871],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[3254999],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[3255015],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[3255078],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[3255141],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3255197,3255265],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[3255896,3255468],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[3255532,3255615,3255901],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[3255938,3255588],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[3256020,3256296,3256139],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[3256960],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[3256985],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[3257056],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[3589741,3589237,3589818,3589357,3589469,3589131],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[3589549,3589396,3589202,3589245],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[3484234],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":20},{"path":["/","home","jerboa","Busser","src","server","https.rs"],"content":"use crate::\n{\n    config::{read_config, Config}, pages::{get_pages, page::Page}, resources::get_resources, util::matches_one, web::{stats::{log_stats, Digest, Stats}, \n    throttle::{handle_throttle, IpThrottler}}\n};\n\nuse std::{collections::HashMap, net::{IpAddr, Ipv4Addr, SocketAddr}};\nuse std::path::PathBuf;\nuse std::sync::Arc;\nuse regex::Regex;\nuse tokio::{spawn, sync::Mutex};\n\nuse axum::\n{\n    middleware, response::IntoResponse, routing::get, \n    Router\n};\nuse axum_server::tls_rustls::RustlsConfig;\n\nuse super::api::{stats::StatsDigest, ApiRequest};\n\n/// An https server that reads a directory configured with [Config]\n/// ```.html``` pages and resources, then serves them.\n/// # Example\n/// ```no_run\n/// use busser::server::https::Server;\n/// #[tokio::main]\n/// async fn main() \n/// {\n///     let server = Server::new(0,0,0,0,true);\n///     server.serve().await;\n/// }\n/// ```\npub struct Server\n{\n    addr: SocketAddr,\n    router: Router,\n    config: Config\n}\n\n/// Checks a uri has a leading /, adds it if not\npub fn parse_uri(uri: String, path: String) -> String\n{\n    if uri.starts_with(&path)\n    {\n        uri.replace(&path, \"/\")\n    }\n    else if uri.starts_with(\"/\")\n    {\n        uri\n    }\n    else\n    {\n        \"/\".to_string()+&uri\n    }\n}\n\nimpl Server \n{\n    pub fn new \n    (\n        a: u8,\n        b: u8,\n        c: u8,\n        d: u8,\n        tag: bool\n    ) \n    -> Server\n    {\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let requests: IpThrottler = IpThrottler::new\n        (\n            config.throttle.max_requests_per_second, \n            config.throttle.timeout_millis,\n            config.throttle.clear_period_seconds\n        );\n\n        let throttle_state = Arc::new(Mutex::new(requests));\n\n        let pages = get_pages(Some(&config.content.path), Some(config.content.cache_period_seconds));\n        let resources = get_resources(Some(&config.content.path), Some(config.content.cache_period_seconds));\n\n        let mut router: Router<(), axum::body::Body> = Router::new();\n        \n        let ignore_patterns = match config.content.ignore_regexes.clone()\n        {\n            Some(p) => p,\n            None => vec![]\n        };\n\n        for mut page in pages\n        {\n\n            if matches_one(&page.get_uri(), &ignore_patterns)\n            {\n                continue\n            }           \n\n            crate::debug(format!(\"Adding page {:?}\", page.preview(64)), None);\n\n            let path = config.content.path.clone()+\"/\";\n\n            let uri = parse_uri(page.get_uri(), path);\n\n            crate::debug(format!(\"Serving: {}\", uri), None);\n\n            if tag { page.insert_tag(); }\n\n            if config.content.allow_without_extension\n            {\n                let extension_regex = Regex::new(r\"\\.\\S+$\").unwrap();\n                let short_uri = extension_regex.replacen(&uri, 1, \"\");\n\n                crate::debug(format!(\"Serving as short url: {}\",short_uri), None);\n\n                let page_short = page.clone();\n\n                router = router.route\n                (\n                    &short_uri, \n                    get(|| async move {page_short.clone().into_response()})\n                );\n            }\n\n            router = router.route\n            (\n                &uri, \n                get(|| async move {page.into_response()})\n            );\n        }\n\n        for resource in resources\n        {\n\n            if matches_one(&resource.get_uri(), &ignore_patterns)\n            {\n                continue\n            }  \n\n            crate::debug(format!(\"Adding resource {:?}\", resource.preview(8)), None);\n\n            let path = config.content.path.clone()+\"/\";\n\n            let uri = parse_uri(resource.get_uri(), path);\n\n            crate::debug(format!(\"Serving: {}\", uri), None);\n            \n            router = router.route\n            (\n                &uri, \n                get(|| async move {resource.clone().into_response()})\n            )\n        }\n\n        match Page::from_file(config.content.home.clone(), config.content.cache_period_seconds)\n        {\n            Some(mut page) => \n            { \n                if tag { page.insert_tag(); }\n                crate::debug(format!(\"Serving home page, /, {}\", page.preview(64)), None);\n                router = router.route(\"/\", get(|| async move {page.clone().into_response()}))\n            },\n            None => {}\n        }\n\n        let stats = Arc::new(Mutex::new(\n            Stats \n            {\n                hits: HashMap::new(), \n                last_save: chrono::offset::Utc::now(),\n                last_digest: chrono::offset::Utc::now(),\n                last_clear: chrono::offset::Utc::now(),\n                summary: Digest::new()\n            }\n        ));\n\n        let _stats_thread = spawn(Stats::stats_thread(stats.clone()));\n\n        router = router.layer(middleware::from_fn_with_state(stats.clone(), log_stats));\n        router = router.layer(middleware::from_fn_with_state(throttle_state.clone(), handle_throttle));\n\n        router = router.layer(middleware::from_fn_with_state(Some(stats), StatsDigest::filter));\n\n        Server\n        {\n            addr: SocketAddr::new(IpAddr::V4(Ipv4Addr::new(a,b,c,d)), config.port_https),\n            router,\n            config\n        }\n    }\n\n    pub fn get_addr(self: Server) -> SocketAddr\n    {\n        self.addr\n    }\n\n    pub async fn serve(self: Server)\n    {\n\n        // configure https\n\n        let cert_path = self.config.cert_path;\n        let key_path = self.config.key_path;\n\n        let config = match RustlsConfig::from_pem_file(\n            PathBuf::from(cert_path.clone()),\n            PathBuf::from(key_path.clone())\n        )\n        .await\n        {\n            Ok(c) => c,\n            Err(e) => \n            {\n                println!(\"error while reading certificates in {} and key {}\\n{}\", cert_path, key_path, e);\n                std::process::exit(1);\n            }\n        };\n\n        axum_server::bind_rustls(self.addr, config)\n        .serve(self.router.into_make_service_with_connect_info::<SocketAddr>())\n        .await\n        .unwrap();\n    }\n\n}","traces":[{"line":42,"address":[2581241,2580656,2581118],"length":1,"stats":{"Line":0},"fn_name":"parse_uri"},{"line":44,"address":[2580691,2580788],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[2580840,2581149],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[2580870,2580971,2580818],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[2580941],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[2581099,2580907,2580978],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[2586006,2581280,2590115],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[2581478],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[2581729],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[2581661],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[2581773],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[2581782],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[2581798],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[2581862],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[2581931,2582018],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[2582204,2582116],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[2582310],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[2582427,2582358],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[2582475],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[2582456,2582573],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[2582575,2589922,2582682],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[2582941,2587692],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[2587957,2587869],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[2588225],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[2588311,2588359],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[2588559],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[2588679,2588705],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[2588685],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[2588788],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[2588928,2588857],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[2589103],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[2589232],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[2589542,2589247,2589488],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[2589293],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[3477985,3477968,3478046,3478016],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":134,"address":[2589795,2588714,2589849],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[2588768],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[3378896,3378973,3378944,3378913],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":141,"address":[2582951,2587552],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[2586156,2583289],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[2586421,2586333],"length":1,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[2586689],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[2586775,2586823],"length":1,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[2587035],"length":1,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[2587425,2587148,2587479],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[2587202],"length":1,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[3405232,3405184,3405201,3405261],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":164,"address":[2583299],"length":1,"stats":{"Line":0},"fn_name":null},{"line":166,"address":[2583403],"length":1,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[2583484,2583444,2583532],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[2583615,2583469],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[3405568,3405585,3405616,3405646],"length":1,"stats":{"Line":0},"fn_name":"{closure#3}"},{"line":175,"address":[2584556],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[2584290],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[2583393],"length":1,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[2584178],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[2584237],"length":1,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[2584256],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[2584283],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[2584641,2584713],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[2586043,2584766],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[2585032,2586025],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[2585278,2585996],"length":1,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[2585584,2585506],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[2590160],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[2590185],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[2590256],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[3312585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[3312621],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[3312916,3313052,3313367,3313464],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[3312657,3312806],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[3312909,3312821],"length":1,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[3313085,3312979,3313399,3313229,3312721,3312474],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[3313479],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[3313609],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[3314355,3314152,3313625],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[3314463],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[3313989,3313745,3313871,3314595,3313518,3314684],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[3313710,3314078,3313753,3313910],"length":1,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[3312742,3314022,3313934,3314481,3314615],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":80},{"path":["/","home","jerboa","Busser","src","server","mod.rs"],"content":"pub mod https;\npub mod http;\npub mod api;","traces":[],"covered":0,"coverable":0},{"path":["/","home","jerboa","Busser","src","util.rs"],"content":"use core::fmt;\nuse std::{fmt::Write, fs::{DirEntry, File}, io::{Read, Write as ioWrite}};\nuse libflate::deflate::{Encoder, Decoder};\nuse regex::Regex;\n\npub fn dump_bytes(v: &[u8]) -> String \n{\n    let mut byte_string = String::new();\n    for &byte in v\n    {\n        write!(&mut byte_string, \"{:0>2X}\", byte).expect(\"byte dump error\");\n    };\n    byte_string\n}\n\npub fn read_bytes(v: String) -> Vec<u8>\n{\n    (0..v.len()).step_by(2)\n    .map\n    (\n        |index| u8::from_str_radix(&v[index..index+2], 16).unwrap()\n    )\n    .collect()\n}\n\npub fn strip_control_characters(s: String) -> String\n{\n    let re = Regex::new(r\"[\\u0000-\\u001F]\").unwrap().replace_all(&s, \"\");\n    return re.to_string()\n}\n\npub fn write_file(path: &str, data: &[u8])\n{\n    let mut file = File::create(path).unwrap();\n    file.write_all(data).unwrap();\n}\n\npub fn read_file_utf8(path: &str) -> Option<String>\n{\n    let mut file = match File::open(path) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            return None\n        },\n        Ok(file) => file,\n    };\n\n    let mut s = String::new();\n    match file.read_to_string(&mut s) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            None\n        },\n        Ok(_) => Some(s)\n    }\n}\n\npub fn read_file_bytes(path: &str) -> Option<Vec<u8>>\n{\n    let mut file = match File::open(path) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            return None\n        },\n        Ok(file) => file,\n    };\n\n    let mut s: Vec<u8> = vec![];\n    match file.read_to_end(&mut s) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            None\n        },\n        Ok(_) => Some(s)\n    }\n}\n\n#[derive(Debug, Clone)]\npub struct ListDirError\n{\n    pub why: String\n}\n\nimpl fmt::Display for ListDirError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.why)\n    }\n}\n\npub fn list_dir(path: String) -> Result<std::fs::ReadDir, ListDirError>\n{\n    match std::fs::read_dir(path)\n    {\n        Ok(files) => \n        {\n            Ok(files)\n        },\n        Err(why) => \n        {\n            Err(ListDirError { why: format!(\"{}\", why)})\n        }\n    }\n}\n\npub fn dir_entry_to_path(d: DirEntry) -> Option<String>\n{\n    let file_os_string = d.file_name();\n\n    match file_os_string.to_str()\n    {\n        Some(name) => Some(name.to_string()),\n        None =>\n        {\n            crate::debug(format!(\"could not load file name: {:?}\", file_os_string), None);\n            None\n        }\n    }\n}\n\npub fn list_sub_dirs(path: String) -> Vec<String>\n{\n    let mut found_dirs: Vec<String> = vec![];\n    match std::fs::read_dir(path.clone())\n    {\n        Ok(files) => \n        {\n            \n            for file in files\n            {\n                let name = match file\n                {\n                    Ok(d) => dir_entry_to_path(d),\n                    Err(e) =>\n                    {\n                        crate::debug(format!(\"could not load file name: {}\", e), None);\n                        continue\n                    }\n                };\n\n                match name \n                {\n                    Some(n) =>\n                    {\n                        let p = path.clone()+\"/\"+&n;\n                        match std::fs::metadata(p.clone())\n                        {\n                            Ok(md) =>\n                            {\n                                match md.is_dir()\n                                {\n                                    true => {found_dirs.push(p.clone()); crate::debug(format!(\"found folder: {}\", p), None)},\n                                    false => {continue}\n                                }\n                            },\n                            Err(e) =>\n                            {\n                                crate::debug(format!(\"error getting file: {}\", e), None);\n                                continue\n                            }\n                        }\n                    },\n                    None => continue\n                }\n            } \n        },\n        Err(why) => \n        {\n            crate::debug(format!(\"Error reading dir {}\\n {}\", path, why), None); \n        }\n    }\n\n    found_dirs\n}\n\npub fn list_dir_by(pattern: Option<Regex>, path: String) -> Vec<String>\n{\n    match std::fs::read_dir(path.clone())\n    {\n        Ok(files) => \n        {\n            let mut found_files: Vec<String> = vec![];\n            for file in files \n            {\n                \n                let file_name = match file\n                {\n                    Ok(d) => dir_entry_to_path(d),\n                    Err(e) =>\n                    {\n                        crate::debug(format!(\"could not load file name: {}\", e), None);\n                        continue\n                    }\n                };\n\n                let file_path = match file_name\n                {\n                    Some(name) => path.clone() + \"/\" + &name,\n                    None => continue\n                };\n            \n                if pattern.clone().is_some()\n                {\n                    match pattern.clone().unwrap().captures(&file_path)\n                    {\n                        Some(_caps) => {found_files.push(file_path.to_string())},\n                        None => {continue}\n                    }\n                }\n                else\n                {\n                    found_files.push(file_path.to_string())\n                }\n            }\n\n            return found_files\n        },\n        Err(why) => \n        {\n            crate::debug(format!(\"Error reading dir {}\\n {}\", path, why), None); \n        }\n    }\n    vec![]\n}\n\npub fn matches_one(uri: &str, patterns: &Vec<String>) -> bool\n{\n    let mut ignore = false;  \n    for re_string in patterns.into_iter()\n    {\n        let re = match Regex::new(re_string.as_str())\n        {\n            Ok(r) => r,\n            Err(e) => \n            {crate::debug(format!(\"Could not parse content ingnore regex\\n{e}\\n Got {re_string}\"), None); continue;}\n        };\n\n        if re.is_match(uri)\n        {\n            crate::debug(format!(\"Ignoring {} due to pattern {re_string}\", uri), None);\n            ignore = true;\n            break;\n        }\n    }\n    ignore\n}\n\n#[derive(Debug, Clone)]\npub struct CompressionError\n{\n    pub why: String\n}\n\nimpl fmt::Display for CompressionError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.why)\n    }\n}\n\npub fn compress(bytes: &[u8]) -> Result<Vec<u8>, CompressionError>\n{\n    let mut encoder = Encoder::new(Vec::new());\n    \n    match encoder.write_all(&bytes)\n    {\n        Ok(_) => (),\n        Err(e) => \n        {\n            return Err(CompressionError { why: format!(\"Error writing to compressor: {}\", e) })\n        }\n    };\n\n    match encoder.finish().into_result()\n    {\n        Ok(data) => Ok(data), \n        Err(e) => \n        {\n            Err(CompressionError { why: format!(\"Error finalising compressor: {}\", e) })\n        }\n    }\n}\n\npub fn decompress(bytes: Vec<u8>) -> Result<String, CompressionError>\n{\n    let mut decoder = Decoder::new(&bytes[..]);\n    let mut decoded_data = Vec::new();\n\n    match decoder.read_to_end(&mut decoded_data)\n    {\n        Ok(_) => (),\n        Err(e) => \n        {\n            return Err(CompressionError { why: format!(\"Error decoding data: {}\", e) })\n        }\n    }\n    \n    match std::str::from_utf8(&decoded_data)\n    {\n        Ok(s) => Ok(s.to_string()),\n        Err(e) => \n        {\n            Err(CompressionError { why: format!(\"Decoded data is not utf8: {}\", e) })\n        }\n    }\n}\n","traces":[{"line":6,"address":[2803904,2804663],"length":1,"stats":{"Line":0},"fn_name":"dump_bytes"},{"line":8,"address":[2803952],"length":1,"stats":{"Line":0},"fn_name":null},{"line":9,"address":[2803967,2804039,2804159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":11,"address":[2804507,2804259],"length":1,"stats":{"Line":0},"fn_name":null},{"line":13,"address":[2804125],"length":1,"stats":{"Line":0},"fn_name":null},{"line":16,"address":[2804924,2804704],"length":1,"stats":{"Line":0},"fn_name":"read_bytes"},{"line":18,"address":[2804850,2804792,2804734],"length":1,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[2804842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[2804960,2805296],"length":1,"stats":{"Line":0},"fn_name":"strip_control_characters"},{"line":28,"address":[2805051,2804982],"length":1,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[2805249],"length":1,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[2805515,2805328],"length":1,"stats":{"Line":0},"fn_name":"write_file"},{"line":34,"address":[2805371],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[2805423,2805481],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[2805552,2806405],"length":1,"stats":{"Line":1},"fn_name":"read_file_utf8"},{"line":40,"address":[2805585],"length":1,"stats":{"Line":1},"fn_name":null},{"line":41,"address":[2805644],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[2806479],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[2806589],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[2805614],"length":1,"stats":{"Line":1},"fn_name":null},{"line":49,"address":[2805637],"length":1,"stats":{"Line":1},"fn_name":null},{"line":50,"address":[2805770,2805851],"length":1,"stats":{"Line":2},"fn_name":null},{"line":51,"address":[2805960],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[2806122],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[2806244],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[2805867],"length":1,"stats":{"Line":1},"fn_name":null},{"line":60,"address":[2806624,2807481],"length":1,"stats":{"Line":1},"fn_name":"read_file_bytes"},{"line":62,"address":[2806657],"length":1,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[2806720],"length":1,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[2807555],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[2807665],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[2806686],"length":1,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[2806701],"length":1,"stats":{"Line":1},"fn_name":null},{"line":72,"address":[2806927,2806846],"length":1,"stats":{"Line":2},"fn_name":null},{"line":73,"address":[2807036],"length":1,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[2807198],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[2807320],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[2806943],"length":1,"stats":{"Line":1},"fn_name":null},{"line":88,"address":[5545163,5545118,5545736],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[2807696],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":90,"address":[2807751],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[2808220,2807824],"length":1,"stats":{"Line":0},"fn_name":"list_dir"},{"line":96,"address":[2807841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[2807879],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[2807911],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[2807930],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[2808074],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[2808256,2808794],"length":1,"stats":{"Line":2},"fn_name":"dir_entry_to_path"},{"line":111,"address":[2808278],"length":1,"stats":{"Line":2},"fn_name":null},{"line":113,"address":[2808405,2808340],"length":1,"stats":{"Line":4},"fn_name":null},{"line":115,"address":[2808539,2808739],"length":1,"stats":{"Line":4},"fn_name":null},{"line":118,"address":[2808589],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[2808711],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[2808832,2810801,2811342],"length":1,"stats":{"Line":2},"fn_name":"list_sub_dirs"},{"line":126,"address":[2808863],"length":1,"stats":{"Line":2},"fn_name":null},{"line":127,"address":[2808942,2809002],"length":1,"stats":{"Line":4},"fn_name":null},{"line":129,"address":[2809054],"length":1,"stats":{"Line":2},"fn_name":null},{"line":132,"address":[2809090,2809228],"length":1,"stats":{"Line":4},"fn_name":null},{"line":134,"address":[2809376],"length":1,"stats":{"Line":2},"fn_name":null},{"line":136,"address":[2809483],"length":1,"stats":{"Line":2},"fn_name":null},{"line":137,"address":[2809558],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[2810888],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[2809652],"length":1,"stats":{"Line":2},"fn_name":null},{"line":146,"address":[2809693],"length":1,"stats":{"Line":2},"fn_name":null},{"line":148,"address":[2809725,2809788,2810812],"length":1,"stats":{"Line":4},"fn_name":null},{"line":149,"address":[2809943,2810014],"length":1,"stats":{"Line":4},"fn_name":null},{"line":151,"address":[2810100],"length":1,"stats":{"Line":2},"fn_name":null},{"line":153,"address":[2810107,2810263],"length":1,"stats":{"Line":4},"fn_name":null},{"line":155,"address":[2810291,2810428],"length":1,"stats":{"Line":2},"fn_name":null},{"line":159,"address":[2810121],"length":1,"stats":{"Line":0},"fn_name":null},{"line":161,"address":[2810640],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[2809124],"length":1,"stats":{"Line":0},"fn_name":null},{"line":172,"address":[2811187],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[2809426],"length":1,"stats":{"Line":2},"fn_name":null},{"line":179,"address":[2811360,2813326,2813940],"length":1,"stats":{"Line":2},"fn_name":"list_dir_by"},{"line":181,"address":[2811489,2811410],"length":1,"stats":{"Line":4},"fn_name":null},{"line":183,"address":[2811541],"length":1,"stats":{"Line":2},"fn_name":null},{"line":185,"address":[2811579],"length":1,"stats":{"Line":2},"fn_name":null},{"line":186,"address":[2811736,2811830],"length":1,"stats":{"Line":4},"fn_name":null},{"line":189,"address":[2811975],"length":1,"stats":{"Line":2},"fn_name":null},{"line":191,"address":[2812145],"length":1,"stats":{"Line":2},"fn_name":null},{"line":192,"address":[2812220],"length":1,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[2813413],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[2812314],"length":1,"stats":{"Line":2},"fn_name":null},{"line":201,"address":[2812355,2813337],"length":1,"stats":{"Line":2},"fn_name":null},{"line":205,"address":[2812632,2812695],"length":1,"stats":{"Line":4},"fn_name":null},{"line":207,"address":[2812889,2813037],"length":1,"stats":{"Line":4},"fn_name":null},{"line":209,"address":[2813089,2813214],"length":1,"stats":{"Line":2},"fn_name":null},{"line":215,"address":[2812823],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[2812029],"length":1,"stats":{"Line":2},"fn_name":null},{"line":221,"address":[2811609],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[2813731],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[2813891],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[2813968,2814822],"length":1,"stats":{"Line":0},"fn_name":"matches_one"},{"line":231,"address":[2814009],"length":1,"stats":{"Line":0},"fn_name":null},{"line":232,"address":[2814017,2814122],"length":1,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[2814138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[2814197],"length":1,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[2814296],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[2815002,2814848],"length":1,"stats":{"Line":0},"fn_name":null},{"line":241,"address":[2814454,2814261],"length":1,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[2814662],"length":1,"stats":{"Line":0},"fn_name":null},{"line":244,"address":[2814795],"length":1,"stats":{"Line":0},"fn_name":null},{"line":248,"address":[2814102],"length":1,"stats":{"Line":0},"fn_name":null},{"line":258,"address":[2815168],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":259,"address":[2815223],"length":1,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[2816272,2815296],"length":1,"stats":{"Line":0},"fn_name":"compress"},{"line":265,"address":[2815323],"length":1,"stats":{"Line":0},"fn_name":null},{"line":267,"address":[2815390,2815462],"length":1,"stats":{"Line":0},"fn_name":null},{"line":270,"address":[2815660],"length":1,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[2816352],"length":1,"stats":{"Line":0},"fn_name":null},{"line":276,"address":[2815503,2815754],"length":1,"stats":{"Line":0},"fn_name":null},{"line":278,"address":[2815815],"length":1,"stats":{"Line":0},"fn_name":null},{"line":279,"address":[2815908],"length":1,"stats":{"Line":0},"fn_name":null},{"line":281,"address":[2816066],"length":1,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[2816560,2817694],"length":1,"stats":{"Line":0},"fn_name":"decompress"},{"line":288,"address":[2816590,2816669],"length":1,"stats":{"Line":0},"fn_name":null},{"line":289,"address":[2816685],"length":1,"stats":{"Line":0},"fn_name":null},{"line":291,"address":[2816742,2816815],"length":1,"stats":{"Line":0},"fn_name":null},{"line":294,"address":[2816855],"length":1,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[2817478],"length":1,"stats":{"Line":0},"fn_name":null},{"line":300,"address":[2816826,2816959],"length":1,"stats":{"Line":0},"fn_name":null},{"line":302,"address":[2817131,2816989],"length":1,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[2817036],"length":1,"stats":{"Line":0},"fn_name":null},{"line":305,"address":[2817205],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":44,"coverable":125},{"path":["/","home","jerboa","Busser","src","web","discord","mod.rs"],"content":"pub mod request;","traces":[],"covered":0,"coverable":0},{"path":["/","home","jerboa","Busser","src","web","discord","request","mod.rs"],"content":"pub mod model;\npub mod post;","traces":[],"covered":0,"coverable":0},{"path":["/","home","jerboa","Busser","src","web","discord","request","model.rs"],"content":"use serde::{Serialize, Deserialize};\n\n#[derive(Clone, Serialize, Deserialize)]\npub struct Webhook \n{\n    addr: String\n}\n\nimpl Webhook\n{\n\n    pub fn new(url: String) -> Webhook\n    {\n        Webhook { addr: url }\n    }\n\n    pub fn get_addr(self: Webhook) -> String \n    {\n        self.addr\n    }\n}","traces":[{"line":12,"address":[3122896],"length":1,"stats":{"Line":0},"fn_name":null},{"line":17,"address":[3122928],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[3122931],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":3},{"path":["/","home","jerboa","Busser","src","web","discord","request","post.rs"],"content":"//! Post messages to a discord webhook\n\nuse std::collections::HashMap;\n\nuse crate::web::discord::request::model::Webhook;\n\n/// Send a simple plaintext string message, msg, to the webhook w\n/// \n/// Should not be used to post JSON payloads, msg will be sent to \n/// the webhook wrapped in the content section. It will appear as \n/// plaintext on the server\n/// \n/// For example\n/// \n/// # Example\n/// ```rust\n/// \n/// use busser::web::discord::request::{model::Webhook, post::post};\n/// \n/// pub async fn post_to_discord(){\n///     let w = Webhook::new(\"https://discord.com/api/webhooks/xxx/yyy\".to_string());\n///     post(w, \"this is some plaintext\".to_string());\n/// }\n/// ```\n/// \n/// is equivalent to the following POST request\n/// \n/// ```not_rust\n///  POST /api/webhooks/xxx/yyy HTTP/1.1\n///  Host: discord.com\n///  Accept: application/json\n///  Content-Type:application/json\n///  Content-Length: xx\n///  {\"content\": \"this is some plaintext\"}\n/// ``` \n\npub async fn post(w: Webhook, msg: String) -> Result<String, reqwest::Error>\n{\n\n    crate::debug(format!(\"Posting to Discord {:?}\", msg), None);\n    let client = reqwest::Client::new();\n\n    let mut map = HashMap::new();\n    map.insert(\"content\", &msg);\n    \n    match client.post(&w.get_addr())\n        .json(&map)\n        .send()\n        .await\n    {\n        Ok(r) => Ok(format!(\"OK\\nGot response:\\n\\n{:#?}\", r)),\n        Err(e) => Err(e)\n    }\n\n}","traces":[{"line":37,"address":[2787344],"length":1,"stats":{"Line":0},"fn_name":"post"},{"line":40,"address":[3404174,3404345],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3412830],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[3404505],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[3083286],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[3413211,3413279,3413007,3413333,3413691,3413137,3413791],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[3083558],"length":1,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[2704417],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[3413850,3413965,3414255],"length":1,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[3413924],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":10},{"path":["/","home","jerboa","Busser","src","web","mod.rs"],"content":"use axum::\n{\n    body::Bytes, http::{HeaderMap, StatusCode}\n};\n\nuse openssl::{pkey::PKey, sign::Signer, hash::MessageDigest, memcmp};\nuse regex::Regex;\n\nuse crate::util::{read_bytes, dump_bytes};\n\npub mod throttle;\npub mod response;\npub mod discord;\npub mod stats;\n\n/// Uses openssl to verify the request body via the given hmac_token\n///   - hmac_header_key is the location in the https header for the digest\npub fn is_authentic\n(\n    headers: HeaderMap,\n    hmac_header_key: &str,\n    hmac_token: String, \n    body: Bytes\n) -> StatusCode\n{\n    match headers.contains_key(hmac_header_key)\n    {\n        false => \n        {\n            crate::debug(\"no signature\".to_string(), None);\n            return StatusCode::UNAUTHORIZED\n        },\n        true => {}\n    };\n\n    let sender_hmac = match std::str::from_utf8(headers[hmac_header_key].as_bytes())\n    {\n        Ok(s) => s,\n        Err(_) => \n        {\n            crate::debug(\"signature utf8 parse failure\".to_string(), None);\n            return StatusCode::BAD_REQUEST\n        }\n    };\n\n    let post_digest = Regex::new(r\"sha256=\").unwrap().replace_all(&sender_hmac, \"\").into_owned().to_uppercase();\n\n    let key = match PKey::hmac(hmac_token.as_bytes())\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"key creation failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n\n    let mut signer = match Signer::new(MessageDigest::sha256(), &key)\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"signer creation failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n    \n    match signer.update(&body)\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"signing update failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n\n    let hmac = match signer.sign_to_vec()\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"sign failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n\n    crate::debug(format!(\"post_digtest: {}, len: {}\\nlocal hmac: {}, len: {}\", post_digest, post_digest.len(), dump_bytes(&hmac), dump_bytes(&hmac).len()), None);\n\n    match memcmp::eq(&hmac, &read_bytes(post_digest.clone()))\n    {\n        true => {},\n        false => \n        {\n            crate::debug(format!(\"bad signature: local/post\\n{}\\n{}\", post_digest, dump_bytes(&hmac)), None);\n            return StatusCode::UNAUTHORIZED\n        }\n    }\n\n    // it is now safe to process the POST request\n\n    StatusCode::ACCEPTED\n}","traces":[{"line":18,"address":[3554878,3551168,3555895],"length":1,"stats":{"Line":0},"fn_name":"is_authentic"},{"line":26,"address":[3551300,3551231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[3551383,3551306],"length":1,"stats":{"Line":0},"fn_name":null},{"line":31,"address":[3551422],"length":1,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[3551462,3551357],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[3551531],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3555803,3551610],"length":1,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[3555842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[3551579,3551640],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[3558582],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[3558669],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[3555677,3552180],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[3555716],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[3552210,3552292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[3552383],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[3552462,3555472],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[3555511],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3552500,3552602],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[3551215],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[3561863,3559221],"length":1,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[3561902],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[3559251],"length":1,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[3559289],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[3559398,3561711],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[3561750],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[3559754,3559905,3559612,3560271],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[3560591,3560787],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[3561061,3560929],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[3561352],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[3561433],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":30},{"path":["/","home","jerboa","Busser","src","web","response","mod.rs"],"content":"pub mod util;","traces":[],"covered":0,"coverable":0},{"path":["/","home","jerboa","Busser","src","web","response","util.rs"],"content":"//! Utility responses for the axum server\n\nuse axum::http::{StatusCode, HeaderMap};\nuse axum::response::IntoResponse;\n\nuse axum::\n{\n    http::Request,\n    middleware::Next,\n    response::Response,\n    body::Bytes,\n};\n\nuse chrono::Local;\n\n/// Response that returns the body of the request, a reflection\n/// \n/// # Example\n/// \n/// ```rust\n/// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n/// use std::sync::{Arc, Mutex};\n///\n/// use axum::\n/// {\n///     routing::post, \n///     Router, \n///     middleware\n/// };\n/// \n/// use busser::web::response::util::reflect;\n/// \n/// pub async fn server() {\n/// let app = Router::new()\n/// .route(\"/\", post(|| async move {  }))\n/// .layer(middleware::from_fn(reflect));\n/// \n/// let ip = Ipv4Addr::new(127,0,0,1);\n/// let addr = SocketAddr::new(IpAddr::V4(ip), 3030);\n/// \n/// axum::Server::bind(&addr)\n/// .serve(app.into_make_service_with_connect_info::<SocketAddr>())\n/// .await\n/// .unwrap();\n/// }\n/// ````\n\npub async fn reflect<B>\n(\n    headers: HeaderMap,\n    request: Request<B>,\n    _next: Next<B>\n) -> Result<Response, StatusCode>\nwhere B: axum::body::HttpBody<Data = Bytes>\n{\n    let (_parts, body) = request.into_parts();\n\n    let bytes = match body.collect().await {\n        Ok(collected) => collected.to_bytes(),\n        Err(_) => {\n            return Err(StatusCode::BAD_REQUEST)\n        }\n    };\n\n    let body = std::str::from_utf8(&bytes).unwrap().to_string();\n\n    println!(\"[{}] Got request:\\n\\nheader:\\n\\n{:?}\\n\\nbody:\\n\\n{}\", Local::now(), headers, body);\n    \n    Ok(format!(\"You sent:\\n{}\",body).into_response())\n    \n}\n\n/// Response that logs the header and body of the request to stdout\n/// \n/// # Example\n/// \n/// ```rust\n/// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n/// use std::sync::{Arc, Mutex};\n///\n/// use axum::\n/// {\n///     routing::post, \n///     Router, \n///     middleware\n/// };\n/// \n/// use busser::web::response::util::stdout_log;\n/// \n/// \n/// pub async fn server() {\n/// let app = Router::new()\n/// .route(\"/\", post(|| async move {  }))\n/// .layer(middleware::from_fn(stdout_log));\n/// \n/// let ip = Ipv4Addr::new(127,0,0,1);\n/// let addr = SocketAddr::new(IpAddr::V4(ip), 3000);\n/// \n/// axum::Server::bind(&addr)\n/// .serve(app.into_make_service_with_connect_info::<SocketAddr>())\n/// .await\n/// .unwrap();\n/// }\n/// ````\npub async fn stdout_log<B>\n(\n    headers: HeaderMap,\n    request: Request<B>,\n    _next: Next<B>\n) -> Result<Response, StatusCode>\nwhere B: axum::body::HttpBody<Data = Bytes>\n{\n    let (_parts, body) = request.into_parts();\n\n    let bytes = match body.collect().await {\n        Ok(collected) => collected.to_bytes(),\n        Err(_) => {\n            return Err(StatusCode::BAD_REQUEST)\n        }\n    };\n\n    let body = std::str::from_utf8(&bytes).unwrap().to_string();\n\n    println!(\"[{}] Got request:\\n\\nheader:\\n\\n{:?}\\n\\nbody:\\n\\n{}\", Local::now(), headers, body);\n    \n    Ok((StatusCode::OK).into_response())\n    \n}","traces":[{"line":56,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":16},{"path":["/","home","jerboa","Busser","src","web","stats.rs"],"content":"use std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::fs::create_dir;\nuse std::net::{IpAddr, Ipv4Addr, SocketAddr};\nuse std::sync::Arc;\nuse std::time::Instant;\nuse axum::middleware::from_fn;\nuse chrono::{DateTime, Datelike, TimeZone, Timelike};\nuse openssl::conf;\nuse openssl::sha::sha512;\nuse regex::Regex;\nuse tokio::sync::{Mutex, MutexGuard};\n\nuse serde::{Deserialize, Serialize};\n\nuse axum::\n{\n    http::{Request, StatusCode}, \n    response::Response, \n    extract::{State, ConnectInfo},\n    middleware::Next\n};\n\nuse crate::config::read_config;\nuse crate::pages::page::is_page;\nuse crate::util::{compress, dump_bytes, list_dir_by, matches_one, read_file_utf8, write_file};\n\nuse crate::web::discord::request::post::post;\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct Hit\n{\n    count: u16,\n    times: Vec<String>,\n    path: String,\n    ip_hash: String\n}\n\n#[derive(Debug, Clone)]\npub struct Digest\n{\n    pub top_hitters: Vec<(String, u16)>,\n    pub top_pages: Vec<(String, u16)>,\n    pub top_resources: Vec<(String, u16)>,\n    pub hits_by_hour_utc: [u16; 24],\n    pub total_hits: u16,\n    pub unique_hits: u16\n}\n\nimpl Digest\n{\n    pub fn new() -> Digest\n    {\n        Digest\n        {\n            top_hitters: vec![],\n            top_pages: vec![],\n            top_resources: vec![],\n            hits_by_hour_utc: [0;24],\n            total_hits: 0,\n            unique_hits: 0\n        }\n    }\n}\n\n#[derive(Debug, Clone)]\npub struct Stats\n{\n    pub hits: HashMap<[u8; 64], Hit>,\n    pub last_save: DateTime<chrono::Utc>,\n    pub last_digest: DateTime<chrono::Utc>,\n    pub last_clear: DateTime<chrono::Utc>,\n    pub summary: Digest\n}\n\nimpl Stats\n{\n    pub async fn process_hit\n    (\n        addr: SocketAddr,\n        state: Arc<Mutex<Stats>>,\n        uri: String \n    )\n    {\n        let start_time = Instant::now();\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let mut stats = state.lock().await;\n\n        let compute_start_time = Instant::now();\n\n        let stats_config = config.stats;\n\n        let ip = addr.ip();\n        let ipv4: Ipv4Addr;\n    \n        match ip \n        {\n            IpAddr::V4(ip4) => {ipv4 = ip4}\n            IpAddr::V6(_ip6) => {return}\n        }\n        \n        let ip_hash = sha512(&ipv4.octets());\n        let hash = sha512(&[uri.as_bytes(), &ipv4.octets()].concat());\n\n        let hit = match stats.hits.contains_key(&hash)\n        {\n            true =>\n            {\n                let mut hit = stats.hits[&hash].clone();\n                let last_hit = stats.hits[&hash].times.last();\n\n                match last_hit \n                {\n                    None => {hit},\n                    Some(s) => \n                    {\n                        let t = DateTime::parse_from_rfc3339(&s);\n                        match t \n                        {\n                            Ok(t) => \n                            {\n                                let delta = (chrono::offset::Utc::now()-t.to_utc()).num_seconds();\n                                if delta < (stats_config.hit_cooloff_seconds as i64)\n                                {\n                                    let total_time = start_time.elapsed().as_secs_f64();\n                                    let compute_time = compute_start_time.elapsed().as_secs_f64();\n\n                                    crate::debug(format!\n                                    (\n                                        \"\\nTotal stats time:         {} s (Passthrough)\\nCompute stats time:       {} s (Passthrough)\", \n                                        total_time,\n                                        compute_time\n                                    ), Some(\"PERFORMANCE\".to_string()));\n\n                                    return\n                                }\n                                hit.times.push(chrono::offset::Utc::now().to_rfc3339());\n                                hit.count += 1;\n                                hit\n                            },\n                            Err(_e) => {hit}\n                        }\n                    }            \n                }\n            },\n            false => \n            {\n\n                Hit {path: uri, count: 1, times: vec![chrono::offset::Utc::now().to_rfc3339()], ip_hash: dump_bytes(&ip_hash)}\n            }\n        };\n\n        crate::debug(format!(\"{:?}\", hit), Some(\"Statistics\".to_string()));\n\n        stats.hits.insert(hash, hit);\n\n        let compute_time = compute_start_time.elapsed().as_secs_f64();\n\n        let total_time = start_time.elapsed().as_secs_f64();\n\n        crate::debug(format!\n        (\n            \"\\nTotal stats time:         {} s\\nCompute stats time:       {} s\", \n            total_time,\n            compute_time\n        ), Some(\"PERFORMANCE\".to_string()));\n    }\n\n    pub fn process_hits(path: String, from: Option<DateTime<chrono::Utc>>, to: Option<DateTime<chrono::Utc>>, top_n: Option<usize>, stats: Option<Stats>) -> Digest\n    {\n\n        let n = match top_n\n        {\n            Some(n) => n,\n            None => 3\n        };\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let mut digest = Digest::new();\n\n        let stats_files = list_dir_by(None, path);\n\n        let mut hitters: HashMap<String, u16> = HashMap::new();\n        let mut pages: HashMap<String, u16> = HashMap::new();\n        let mut resources: HashMap<String, u16> = HashMap::new();\n\n        let mut hits: Vec<Hit> = vec![];\n\n        for file in stats_files\n        {\n            crate::debug(format!(\"Processing stats files: {}\", file), None);\n            \n            let time_string = match file.split(\"/\").last()\n            {\n                Some(s) => s,\n                None => {crate::debug(format!(\"Could not parse time from stats file name {}\",file), None); continue}\n            };\n\n            let t = match DateTime::parse_from_rfc3339(&time_string)\n            {\n                Ok(date) => date,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            if from.is_some_and(|from| t < from) { continue }\n            if to.is_some_and(|to| t > to) { continue }\n\n            let data = match read_file_utf8(&file)\n            {\n                Some(d) => d,\n                None => {continue}\n            };\n\n            let file_hits: Vec<Hit> = match serde_json::from_str(&data)\n            {\n                Ok(s) => s,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            for hit in file_hits\n            {\n                hits.push(hit);\n            }\n        }\n\n        if stats.is_some()\n        {\n            for (_hash, hit) in &stats.as_ref().unwrap().hits\n            {\n                // check the cached stats are within the time period, then add\n                let mut count = 0;\n                let mut times: Vec<String> = vec![];\n                for i in 0..hit.times.len()\n                {\n                    let t = match DateTime::parse_from_rfc3339(&hit.times[i])\n                    {\n                        Ok(date) => date,\n                        Err(e) => {crate::debug(format!(\"Error {}\",e), None); continue}\n                    };\n                    if !from.is_some_and(|from| t < from) && !to.is_some_and(|to| t > to) \n                    {\n                        count += 1;\n                        times.push(hit.times[i].clone());\n                    }\n                }\n                if count > 0\n                {\n                    let h = Hit {count, times, ip_hash: hit.ip_hash.clone(), path: hit.path.clone()};\n                    hits.push(h.clone());\n                }\n            }\n        }\n\n        let ignore_patterns = match config.content.ignore_regexes.clone()\n        {\n            Some(p) => p,\n            None => vec![]\n        };\n\n        for hit in hits\n        {\n            if matches_one(&hit.path, &ignore_patterns)\n            {\n                continue\n            }  \n\n            match hitters.contains_key(&hit.ip_hash)\n            {\n                true => {hitters.insert(hit.ip_hash.clone(), hit.count+hitters[&hit.ip_hash]);},\n                false => \n                {\n                    hitters.insert(hit.ip_hash, hit.count);\n                    digest.unique_hits += 1;\n                }\n            }\n\n            if is_page(&hit.path, &config.domain)\n            {\n                match pages.contains_key(&hit.path)\n                {\n                    true => {pages.insert(hit.path.clone(), hit.count+pages[&hit.path]);},\n                    false => {pages.insert(hit.path, hit.count);}\n                }\n            }\n            else\n            {\n                match resources.contains_key(&hit.path)\n                {\n                    true => {resources.insert(hit.path.clone(), hit.count+resources[&hit.path]);},\n                    false => {resources.insert(hit.path, hit.count);}\n                }\n            }\n\n            digest.total_hits += hit.count;\n\n            for time in hit.times\n            {\n                match DateTime::parse_from_rfc3339(&time)\n                {\n                    Ok(t) => \n                    {\n                        if (0..23).contains(&t.hour()) { digest.hits_by_hour_utc[t.hour() as usize]+= 1; }\n                    },\n                    Err(_e) => {}\n                }\n            }\n        }\n\n        let mut all_hitters: Vec<(String, u16)> = hitters.into_iter().collect();\n        let mut all_pages: Vec<(String, u16)> = pages.into_iter().collect();\n        let mut all_resources: Vec<(String, u16)> = resources.into_iter().collect();\n\n        all_hitters.sort_by(|a: &(String, u16), b: &(String, u16)| a.1.cmp(&b.1));\n        all_hitters.reverse();\n\n        digest.top_hitters = (0..n).map(|i| (\"\".to_string(), 0)).collect();\n\n        for i in 0..n\n        {\n            if i < all_hitters.len()\n            {\n                digest.top_hitters[i] = all_hitters[i].clone();\n            }\n            else\n            {\n                digest.top_hitters[i] = (\"\".to_string(), 0);\n            }\n        }\n\n        all_pages.sort_by(|a: &(String, u16), b: &(String, u16)| a.1.cmp(&b.1));\n        all_pages.reverse();\n\n        all_resources.sort_by(|a: &(String, u16), b: &(String, u16)| a.1.cmp(&b.1));\n        all_resources.reverse();\n\n        digest.top_pages = (0..n).map(|i| (\"\".to_string(), 0)).collect();\n        digest.top_resources = (0..n).map(|i| (\"\".to_string(), 0)).collect();\n\n        for i in 0..n\n        {\n            if i < all_pages.len()\n            {\n                digest.top_pages[i] = all_pages[i].clone();\n            }\n            else\n            {\n                digest.top_pages[i] = (\"\".to_string(), 0);\n            }\n\n            if i < all_resources.len()\n            {\n                digest.top_resources[i] = all_resources[i].clone();\n            }\n            else\n            {\n                digest.top_resources[i] = (\"\".to_string(), 0);\n            }\n        }\n\n        digest\n\n    }\n\n    pub fn save(stats: &mut MutexGuard<'_, Stats>)\n    {\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let stats_config = config.stats;\n\n        let write_start_time = Instant::now();\n\n        if !std::path::Path::new(&stats_config.path).exists()\n        {\n            match create_dir(stats_config.path.to_string())\n            {\n                Ok(_s) => {},\n                Err(e) => {crate::debug(format!(\"Error creating stats dir {}\",e), None)}\n            }\n        }\n\n        let file_name = stats_config.path.to_string()+\"/\"+&chrono::offset::Utc::now().to_rfc3339();\n        let hits: Vec<Hit> = stats.hits.values().cloned().collect();\n        match serde_json::to_string(&hits)\n        {\n            Ok(s) => {write_file(&file_name, s.as_bytes())},\n            Err(e) => {crate::debug(format!(\"Error saving stats {}\", e), None)}\n        }\n\n        let write_time = write_start_time.elapsed().as_secs_f64();\n\n        stats.last_save = chrono::offset::Utc::now();\n        stats.hits.clear();\n\n        crate::debug(format!\n        (\n            \"Write stats time:       {} s\", \n            write_time\n        ), Some(\"PERFORMANCE\".to_string()));\n\n    }\n\n    pub fn archive()\n    {\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let stats_files = list_dir_by(None, config.stats.path.clone());\n\n        for file in stats_files\n        {\n            let time_string = match file.split(\"/\").last()\n            {\n                Some(s) => s,\n                None => {crate::debug(format!(\"Could not parse time from stats file name {}\",file), None); continue}\n            };\n\n            let _t = match DateTime::parse_from_rfc3339(&time_string)\n            {\n                Ok(date) => date,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            let data = match read_file_utf8(&file)\n            {\n                Some(d) => d,\n                None => {continue}\n            };\n\n            let _file_hits: Vec<Hit> = match serde_json::from_str(&data)\n            {\n                Ok(s) => s,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            let zip = match compress(data.as_bytes())\n            {\n                Ok(z) => z,\n                Err(e) => {crate::debug(format!(\"{e}, compressing stats file {}\", file), None); continue}\n            };\n\n            let mut name = String::new();\n            name.push_str(config.stats.path.as_str());\n            name.push_str(&time_string);\n            name.push_str(\".zip\");\n            write_file(&name, &zip);\n\n            match std::fs::remove_file(file.clone())\n            {\n                Ok(_) => {},\n                Err(e) => {crate::debug(format!(\"{e}, while deleting stats file {}\", file), None);}\n            }\n        }\n    }\n\n    pub fn digest_message(digest: Digest, from: Option<DateTime<chrono::Utc>>, to: Option<DateTime<chrono::Utc>>) -> String\n    {\n        let mut msg = String::new(); \n\n        match from\n        {\n            Some(s) => \n            {\n                match to\n                {\n                    Some(t) =>\n                    {\n                        msg.push_str(format!(\"Hits from {} to {}\\n\", s, t).as_str());\n                    },\n                    None => \n                    {\n                        msg.push_str(format!(\"Hits since {}\\n\", s).as_str());\n                    }\n                }  \n            },\n            None => {msg.push_str(\"All hits\\n\");}\n        };\n        \n        msg.push_str(format!(\"Total / Unique: {} / {}\\n\", digest.total_hits, digest.unique_hits).as_str());\n\n        let mut top_resources = String::new();\n        let mut top_pages = String::new();\n        let n = min(digest.top_resources.len(), digest.top_pages.len());\n        for i in 0..n\n        {\n            if digest.top_resources[i].1 > 0\n            {\n                top_resources.push_str(format!(\"  {} : {}\\n\", digest.top_resources[i].0, digest.top_resources[i].1).as_str());\n            }\n\n            if digest.top_pages[i].1 > 0\n            {\n                top_pages.push_str(format!(\"  {} : {}\\n\", digest.top_pages[i].0, digest.top_pages[i].1).as_str());\n            }\n        }\n        msg.push_str(format!(\"Top {n} pages:\\n{}\\n\", top_pages).as_str());\n        msg.push_str(format!(\"Top {n} resources:\\n{}\\n\", top_resources).as_str());\n        msg.push_str(format!(\"Hits by hour (UTC):\\n\\n{}\", hits_by_hour_text_graph(digest.hits_by_hour_utc, '-', 10)).as_str());\n\n        msg\n    }\n\n    pub async fn stats_thread(state: Arc<Mutex<Stats>>)\n    {\n        loop\n        {\n\n            let t = chrono::offset::Utc::now();\n            \n            {\n                let mut stats = state.lock().await;\n\n                let config = match read_config()\n                {\n                    Some(c) => c,\n                    None =>\n                    {\n                        std::process::exit(1)\n                    }\n                };\n\n                let stats_config = config.stats;\n\n                if (t - stats.last_save).num_seconds() > stats_config.save_period_seconds as i64\n                {\n                    Stats::save(&mut stats);\n                }\n\n                if (t - stats.last_digest).num_seconds() > stats_config.digest_period_seconds as i64\n                {\n                    stats.summary = Self::process_hits(stats_config.path.clone(), Some(stats.last_digest), None, stats_config.top_n_digest, Some(stats.to_owned()));\n                    let msg = Stats::digest_message(stats.summary.clone(), Some(stats.last_digest), None);\n                    match post(config.notification_endpoint, msg).await\n                    {\n                        Ok(_s) => (),\n                        Err(e) => {crate::debug(format!(\"Error posting to discord\\n{}\", e), None);}\n                    }\n                    stats.last_digest = t;\n                }\n\n                if (t - stats.last_clear).num_seconds() > stats_config.log_files_clear_period_seconds as i64\n                {\n                    Self::archive();\n                    stats.last_clear = t;\n                }\n            }\n\n            let wait = min(3600, (chrono::Utc::with_ymd_and_hms\n            (\n                &chrono::Utc, \n                t.year(), \n                t.month(), \n                t.day(), \n                1, \n                0, \n                0\n            ).unwrap() + chrono::Duration::days(1) - t).num_seconds()) as u64;\n            crate::debug(format!(\"Sleeping for {}\", wait), Some(\"Statistics\".to_string()));\n            tokio::time::sleep(std::time::Duration::from_secs(wait)).await;\n        }\n    }\n}\n\npub async fn log_stats<B>\n(\n    ConnectInfo(addr): ConnectInfo<SocketAddr>,\n    State(state): State<Arc<Mutex<Stats>>>,\n    request: Request<B>,\n    next: Next<B>\n) -> Result<Response, StatusCode>\n{\n    \n    let uri = request.uri().to_string();\n    tokio::spawn\n    (async move\n        {\n            Stats::process_hit(addr, state, uri).await\n        }\n    );\n           \n    Ok(next.run(request).await)\n}\n\npub fn hits_by_hour_text_graph(hits: [u16; 24], symbol: char, size: u8) -> String\n{\n    let mut graph = String::new();\n\n    let mut top_hour = hits[0];\n    for i in 1..23\n    {\n        top_hour = max(top_hour, hits[i]);\n    }\n\n    for (i, h) in hits.iter().enumerate()\n    {\n        let s = ((size as f64) * (*h as f64) / (top_hour as f64)) as usize;\n\n        graph.push_str(format!(\"{:0>2}:00\", i).as_str());\n        graph.push_str(std::iter::repeat(symbol).take(s).collect::<String>().as_str());\n        graph.push_str(\"\\n\");\n    }\n\n    graph\n}","traces":[{"line":52,"address":[3343088,3343384],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[3343105],"length":1,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[3343134],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[3343179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[3343233],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[3343424],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[2987980,2987820],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[2987986,2987662,2988044],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[2988141],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[2988070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[2717118],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[2988787,2988702],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[2988802],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[2988915],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[2988986],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[2989004],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[2989054],"length":1,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[2989040,2989098],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[2989147],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[2989555,2989485],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[2990385,2989666],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[2990521,2990442],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[2990641],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[2990670],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[2990709],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[2990725],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[2990791],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[2990809],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[2990897,2990825],"length":1,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[2991039],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[2991068,2991293],"length":1,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[2991350],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[2991703,2991939],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[2992031,2992044,2991839,2991974,2991537],"length":1,"stats":{"Line":0},"fn_name":null},{"line":146,"address":[2991109,2991049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[2991245,2991163],"length":1,"stats":{"Line":0},"fn_name":null},{"line":148,"address":[2991206],"length":1,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[2990844],"length":1,"stats":{"Line":0},"fn_name":null},{"line":158,"address":[2990350,2989594,2989696],"length":1,"stats":{"Line":0},"fn_name":null},{"line":162,"address":[2992063,2994074,2994061,2992114],"length":1,"stats":{"Line":0},"fn_name":null},{"line":164,"address":[2992445,2992375],"length":1,"stats":{"Line":0},"fn_name":null},{"line":166,"address":[2992651],"length":1,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[2992739],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[2993054,2993290],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[2993325,2992906,2993190,2994029,2994042],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[3357311,3343504,3348672],"length":1,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[3343598],"length":1,"stats":{"Line":0},"fn_name":null},{"line":183,"address":[3343815],"length":1,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[3343801],"length":1,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[3343902,3343839],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[3343996],"length":1,"stats":{"Line":0},"fn_name":null},{"line":192,"address":[3343928],"length":1,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[3344032],"length":1,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[3344248,3344105],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[3344256],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[3344313],"length":1,"stats":{"Line":0},"fn_name":null},{"line":202,"address":[3344378],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[3344443],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[3344624,3344508],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[3354663],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[3354788],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[3355036],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[3355138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[3355084,3355279],"length":1,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[3355305],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[3355398,3356976],"length":1,"stats":{"Line":0},"fn_name":null},{"line":222,"address":[2994816,2994821],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":223,"address":[2994853,2994848],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":225,"address":[3355601],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[3355680],"length":1,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[3355752,3355823],"length":1,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[3355875],"length":1,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[3356675,3356017,3356518],"length":1,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[3355947,3356152],"length":1,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[3356415,3356491],"length":1,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[3344931],"length":1,"stats":{"Line":0},"fn_name":null},{"line":245,"address":[3345000,3353856],"length":1,"stats":{"Line":0},"fn_name":null},{"line":248,"address":[3345246],"length":1,"stats":{"Line":0},"fn_name":null},{"line":249,"address":[3345256],"length":1,"stats":{"Line":0},"fn_name":null},{"line":250,"address":[3353075,3353345,3353151],"length":1,"stats":{"Line":0},"fn_name":null},{"line":252,"address":[3353888,3353369],"length":1,"stats":{"Line":0},"fn_name":null},{"line":254,"address":[3353972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":255,"address":[3354065,3354459],"length":1,"stats":{"Line":0},"fn_name":null},{"line":257,"address":[2994880,2994912,2994885,2994917],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":259,"address":[3354266,3354351],"length":1,"stats":{"Line":0},"fn_name":null},{"line":260,"address":[3354392,3354325],"length":1,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[3353324],"length":1,"stats":{"Line":0},"fn_name":null},{"line":265,"address":[3353425],"length":1,"stats":{"Line":0},"fn_name":null},{"line":266,"address":[3353748,3353799],"length":1,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[3344962,3345278],"length":1,"stats":{"Line":0},"fn_name":null},{"line":273,"address":[3345326],"length":1,"stats":{"Line":0},"fn_name":null},{"line":274,"address":[3345307,3345424],"length":1,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[3345426,3352435,3345537],"length":1,"stats":{"Line":0},"fn_name":null},{"line":279,"address":[3345827,3350456],"length":1,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[3350495,3350558],"length":1,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[3352929,3350777,3350638],"length":1,"stats":{"Line":0},"fn_name":null},{"line":289,"address":[3350564],"length":1,"stats":{"Line":0},"fn_name":null},{"line":290,"address":[3350665,3350710],"length":1,"stats":{"Line":0},"fn_name":null},{"line":294,"address":[3350743,3351042],"length":1,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[3351623,3351170],"length":1,"stats":{"Line":0},"fn_name":null},{"line":298,"address":[3352907,3351703,3351735],"length":1,"stats":{"Line":0},"fn_name":null},{"line":299,"address":[3351730,3351629],"length":1,"stats":{"Line":0},"fn_name":null},{"line":304,"address":[3351136,3351214],"length":1,"stats":{"Line":0},"fn_name":null},{"line":306,"address":[3351361,3351294],"length":1,"stats":{"Line":0},"fn_name":null},{"line":307,"address":[3351220],"length":1,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[3351321,3351976,3352051],"length":1,"stats":{"Line":0},"fn_name":null},{"line":313,"address":[3352084,3351984],"length":1,"stats":{"Line":0},"fn_name":null},{"line":315,"address":[3352307,3352541],"length":1,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[3352578],"length":1,"stats":{"Line":0},"fn_name":null},{"line":319,"address":[3352643,3352594,3352718],"length":1,"stats":{"Line":0},"fn_name":null},{"line":321,"address":[3352620],"length":1,"stats":{"Line":0},"fn_name":null},{"line":326,"address":[3345861],"length":1,"stats":{"Line":0},"fn_name":null},{"line":327,"address":[3345971,3346098],"length":1,"stats":{"Line":0},"fn_name":null},{"line":328,"address":[3346252,3346125],"length":1,"stats":{"Line":0},"fn_name":null},{"line":330,"address":[2994987,2994944],"length":1,"stats":{"Line":0},"fn_name":"{closure#4}"},{"line":331,"address":[3346382],"length":1,"stats":{"Line":0},"fn_name":null},{"line":333,"address":[2995008,2995031],"length":1,"stats":{"Line":0},"fn_name":"{closure#5}"},{"line":335,"address":[3346908,3346692],"length":1,"stats":{"Line":0},"fn_name":null},{"line":337,"address":[3349718,3346932,3350050,3350372],"length":1,"stats":{"Line":0},"fn_name":null},{"line":339,"address":[3350085,3349757,3350377],"length":1,"stats":{"Line":0},"fn_name":null},{"line":343,"address":[3349723,3349802,3350055],"length":1,"stats":{"Line":0},"fn_name":null},{"line":347,"address":[2995147,2995104],"length":1,"stats":{"Line":0},"fn_name":"{closure#6}"},{"line":348,"address":[3346989],"length":1,"stats":{"Line":0},"fn_name":null},{"line":350,"address":[2995211,2995168],"length":1,"stats":{"Line":0},"fn_name":"{closure#7}"},{"line":351,"address":[3347113],"length":1,"stats":{"Line":0},"fn_name":null},{"line":353,"address":[2995255,2995232],"length":1,"stats":{"Line":0},"fn_name":"{closure#8}"},{"line":354,"address":[2995328,2995351],"length":1,"stats":{"Line":0},"fn_name":"{closure#9}"},{"line":356,"address":[3348002,3347671],"length":1,"stats":{"Line":0},"fn_name":null},{"line":358,"address":[3348026,3348978,3348288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":360,"address":[3348327,3348691,3349680],"length":1,"stats":{"Line":0},"fn_name":null},{"line":364,"address":[3348293,3348372,3348650],"length":1,"stats":{"Line":0},"fn_name":null},{"line":367,"address":[3348999,3349653,3348620,3349331],"length":1,"stats":{"Line":0},"fn_name":null},{"line":369,"address":[3349366,3349038,3349658],"length":1,"stats":{"Line":0},"fn_name":null},{"line":373,"address":[3349336,3349004,3349083],"length":1,"stats":{"Line":0},"fn_name":null},{"line":377,"address":[3347864],"length":1,"stats":{"Line":0},"fn_name":null},{"line":381,"address":[3358258,3360277,3357360],"length":1,"stats":{"Line":0},"fn_name":null},{"line":383,"address":[3357383],"length":1,"stats":{"Line":0},"fn_name":null},{"line":385,"address":[3357515],"length":1,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[3357447],"length":1,"stats":{"Line":0},"fn_name":null},{"line":392,"address":[3357559],"length":1,"stats":{"Line":0},"fn_name":null},{"line":394,"address":[3357748,3357663],"length":1,"stats":{"Line":0},"fn_name":null},{"line":396,"address":[3357763],"length":1,"stats":{"Line":0},"fn_name":null},{"line":398,"address":[3357890,3357841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":400,"address":[3357375],"length":1,"stats":{"Line":0},"fn_name":null},{"line":401,"address":[3358059,3357962],"length":1,"stats":{"Line":0},"fn_name":null},{"line":405,"address":[3357864,3360314,3358269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":406,"address":[3358600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":407,"address":[3358700,3358771],"length":1,"stats":{"Line":0},"fn_name":null},{"line":409,"address":[3358954,3358800],"length":1,"stats":{"Line":0},"fn_name":null},{"line":410,"address":[3359124,3358860],"length":1,"stats":{"Line":0},"fn_name":null},{"line":413,"address":[3359093,3359326],"length":1,"stats":{"Line":0},"fn_name":null},{"line":415,"address":[3359377],"length":1,"stats":{"Line":0},"fn_name":null},{"line":416,"address":[3359461],"length":1,"stats":{"Line":0},"fn_name":null},{"line":418,"address":[3359796,3359576],"length":1,"stats":{"Line":0},"fn_name":null},{"line":422,"address":[3360292,3359831,3359696],"length":1,"stats":{"Line":0},"fn_name":null},{"line":426,"address":[3360496,3363760,3364724],"length":1,"stats":{"Line":0},"fn_name":null},{"line":428,"address":[3360503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":430,"address":[3360619],"length":1,"stats":{"Line":0},"fn_name":null},{"line":433,"address":[3360551],"length":1,"stats":{"Line":0},"fn_name":null},{"line":437,"address":[3364702,3360655],"length":1,"stats":{"Line":0},"fn_name":null},{"line":439,"address":[3360791,3360862],"length":1,"stats":{"Line":0},"fn_name":null},{"line":441,"address":[3361085,3361190],"length":1,"stats":{"Line":0},"fn_name":null},{"line":443,"address":[3361399],"length":1,"stats":{"Line":0},"fn_name":null},{"line":444,"address":[3361501],"length":1,"stats":{"Line":0},"fn_name":null},{"line":447,"address":[3361642,3361447],"length":1,"stats":{"Line":0},"fn_name":null},{"line":449,"address":[3361660],"length":1,"stats":{"Line":0},"fn_name":null},{"line":450,"address":[3361707,3364564],"length":1,"stats":{"Line":0},"fn_name":null},{"line":453,"address":[3361821,3361684],"length":1,"stats":{"Line":0},"fn_name":null},{"line":455,"address":[3361873],"length":1,"stats":{"Line":0},"fn_name":null},{"line":459,"address":[3361945,3362028],"length":1,"stats":{"Line":0},"fn_name":null},{"line":461,"address":[3362076],"length":1,"stats":{"Line":0},"fn_name":null},{"line":462,"address":[3362174,3364127,3364290],"length":1,"stats":{"Line":0},"fn_name":null},{"line":465,"address":[3362334,3362148],"length":1,"stats":{"Line":0},"fn_name":null},{"line":467,"address":[3362364],"length":1,"stats":{"Line":0},"fn_name":null},{"line":468,"address":[3363771,3362446,3363934],"length":1,"stats":{"Line":0},"fn_name":null},{"line":471,"address":[3362436],"length":1,"stats":{"Line":0},"fn_name":null},{"line":472,"address":[3362734,3362638],"length":1,"stats":{"Line":0},"fn_name":null},{"line":473,"address":[3362741],"length":1,"stats":{"Line":0},"fn_name":null},{"line":474,"address":[3362772],"length":1,"stats":{"Line":0},"fn_name":null},{"line":475,"address":[3362807],"length":1,"stats":{"Line":0},"fn_name":null},{"line":477,"address":[3362940],"length":1,"stats":{"Line":0},"fn_name":null},{"line":480,"address":[3363190,3363359,3363061],"length":1,"stats":{"Line":0},"fn_name":null},{"line":485,"address":[3365554,3369644,3364752],"length":1,"stats":{"Line":0},"fn_name":null},{"line":487,"address":[3364799],"length":1,"stats":{"Line":0},"fn_name":null},{"line":489,"address":[3364874],"length":1,"stats":{"Line":0},"fn_name":null},{"line":491,"address":[3364933],"length":1,"stats":{"Line":0},"fn_name":null},{"line":493,"address":[3364955],"length":1,"stats":{"Line":0},"fn_name":null},{"line":495,"address":[3365192],"length":1,"stats":{"Line":0},"fn_name":null},{"line":497,"address":[3365708],"length":1,"stats":{"Line":0},"fn_name":null},{"line":501,"address":[3365314],"length":1,"stats":{"Line":0},"fn_name":null},{"line":505,"address":[3364890,3365013],"length":1,"stats":{"Line":0},"fn_name":null},{"line":508,"address":[3365023,3366004,3366111],"length":1,"stats":{"Line":0},"fn_name":null},{"line":510,"address":[3366372],"length":1,"stats":{"Line":0},"fn_name":null},{"line":511,"address":[3366387],"length":1,"stats":{"Line":0},"fn_name":null},{"line":512,"address":[3366518,3366446],"length":1,"stats":{"Line":0},"fn_name":null},{"line":513,"address":[3366592,3366894],"length":1,"stats":{"Line":0},"fn_name":null},{"line":515,"address":[3366918,3368497],"length":1,"stats":{"Line":0},"fn_name":null},{"line":517,"address":[3368720,3368847,3368569],"length":1,"stats":{"Line":0},"fn_name":null},{"line":520,"address":[3368520,3369099],"length":1,"stats":{"Line":0},"fn_name":null},{"line":522,"address":[3369380,3369259,3369126],"length":1,"stats":{"Line":0},"fn_name":null},{"line":525,"address":[3367094,3366781,3366983],"length":1,"stats":{"Line":0},"fn_name":null},{"line":526,"address":[3367490,3367355,3367601],"length":1,"stats":{"Line":0},"fn_name":null},{"line":527,"address":[3367862,3368016],"length":1,"stats":{"Line":0},"fn_name":null},{"line":529,"address":[3368382],"length":1,"stats":{"Line":0},"fn_name":null},{"line":532,"address":[2995529],"length":1,"stats":{"Line":0},"fn_name":null},{"line":534,"address":[2995608],"length":1,"stats":{"Line":0},"fn_name":null},{"line":537,"address":[2995675],"length":1,"stats":{"Line":0},"fn_name":null},{"line":540,"address":[2717765],"length":1,"stats":{"Line":0},"fn_name":null},{"line":542,"address":[2996436,2996527],"length":1,"stats":{"Line":0},"fn_name":null},{"line":544,"address":[2996624],"length":1,"stats":{"Line":0},"fn_name":null},{"line":547,"address":[2996553],"length":1,"stats":{"Line":0},"fn_name":null},{"line":551,"address":[2996691],"length":1,"stats":{"Line":0},"fn_name":null},{"line":553,"address":[2996925,2996803],"length":1,"stats":{"Line":0},"fn_name":null},{"line":555,"address":[2997138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":558,"address":[2997171,2997077,2999317],"length":1,"stats":{"Line":0},"fn_name":null},{"line":560,"address":[2997387,2997464,3001151,3001098,3001111],"length":1,"stats":{"Line":0},"fn_name":null},{"line":561,"address":[2998185,3001079,3001066,2998259],"length":1,"stats":{"Line":0},"fn_name":null},{"line":562,"address":[2717784],"length":1,"stats":{"Line":0},"fn_name":null},{"line":564,"address":[2998870],"length":1,"stats":{"Line":0},"fn_name":null},{"line":565,"address":[2999082,2998921],"length":1,"stats":{"Line":0},"fn_name":null},{"line":567,"address":[2999289,2999018],"length":1,"stats":{"Line":0},"fn_name":null},{"line":570,"address":[2999330,2999613,2997323],"length":1,"stats":{"Line":0},"fn_name":null},{"line":572,"address":[2999511],"length":1,"stats":{"Line":0},"fn_name":null},{"line":573,"address":[2999522],"length":1,"stats":{"Line":0},"fn_name":null},{"line":577,"address":[3000329,3000386,3000217],"length":1,"stats":{"Line":0},"fn_name":null},{"line":580,"address":[3000123],"length":1,"stats":{"Line":0},"fn_name":null},{"line":581,"address":[3000150],"length":1,"stats":{"Line":0},"fn_name":null},{"line":582,"address":[3000177],"length":1,"stats":{"Line":0},"fn_name":null},{"line":586,"address":[3000356,3000304],"length":1,"stats":{"Line":0},"fn_name":null},{"line":587,"address":[3000592,3000637,3001023,3001036,3000513],"length":1,"stats":{"Line":0},"fn_name":null},{"line":588,"address":[2717806],"length":1,"stats":{"Line":0},"fn_name":null},{"line":593,"address":[3001424],"length":1,"stats":{"Line":0},"fn_name":"log_stats<hyper::body::body::Body>"},{"line":602,"address":[3001907,3002025],"length":1,"stats":{"Line":0},"fn_name":null},{"line":604,"address":[3002044,3003283,3003142,3003420,3003246,3003072,3003097,3003672],"length":1,"stats":{"Line":0},"fn_name":"{async_block#0}<hyper::body::body::Body>"},{"line":606,"address":[3003135,3003150,3003480,3003332,3003273],"length":1,"stats":{"Line":0},"fn_name":null},{"line":610,"address":[2688244],"length":1,"stats":{"Line":0},"fn_name":null},{"line":613,"address":[3371434,3371331,3369696],"length":1,"stats":{"Line":1},"fn_name":"hits_by_hour_text_graph"},{"line":615,"address":[3369757],"length":1,"stats":{"Line":1},"fn_name":null},{"line":617,"address":[3369778],"length":1,"stats":{"Line":1},"fn_name":null},{"line":618,"address":[3369789,3369916,3370050,3371429],"length":1,"stats":{"Line":4},"fn_name":null},{"line":620,"address":[3370071,3371363],"length":1,"stats":{"Line":2},"fn_name":null},{"line":623,"address":[3370367,3370018,3370123],"length":1,"stats":{"Line":3},"fn_name":null},{"line":625,"address":[3370399],"length":1,"stats":{"Line":1},"fn_name":null},{"line":627,"address":[3370854,3370606],"length":1,"stats":{"Line":2},"fn_name":null},{"line":628,"address":[3371114],"length":1,"stats":{"Line":1},"fn_name":null},{"line":629,"address":[3371299],"length":1,"stats":{"Line":1},"fn_name":null},{"line":632,"address":[3370317],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":11,"coverable":247},{"path":["/","home","jerboa","Busser","src","web","throttle.rs"],"content":"use std::collections::HashMap;\nuse std::net::{SocketAddr, Ipv4Addr, IpAddr};\nuse std::time::{Instant, Duration};\nuse std::sync::Arc;\nuse openssl::sha::{self, sha512};\nuse tokio::sync::Mutex;\n\nuse axum::\n{\n    http::{self, StatusCode}, \n    response::Response, \n    extract::{State, ConnectInfo},\n    middleware::Next\n};\n\n#[derive(PartialEq, Eq, Hash, Clone, Debug)]\npub struct Request\n{\n    hash: [u8; 64]\n}\n\nimpl Request\n{\n    pub fn new(ip: Ipv4Addr, uri: &str) -> Request\n    {\n        Request { hash: sha512(&[uri.as_bytes(), &ip.octets()].concat()) }\n    }\n}\n\npub struct RequestData\n{\n    count: u32,\n    last_request_time: Instant,\n    timeout: bool\n}\n\nimpl RequestData\n{\n    pub fn clone(&self) -> RequestData\n    {\n        RequestData { count: self.count.clone(), last_request_time: self.last_request_time.clone(), timeout: false }\n    }\n}\n\npub struct IpThrottler\n{\n    requests_from: HashMap<Request, RequestData>,\n    max_requests_per_second: f64,\n    timeout_millis: u128,\n    clear_period: Duration,\n    last_clear: Instant \n}\n\nimpl IpThrottler\n{\n    pub fn new(max_requests_per_second: f64, timeout_millis: u128, clear_period_seconds: u64) -> IpThrottler\n    {\n        IpThrottler \n        {\n            requests_from: HashMap::new(), \n            max_requests_per_second: max_requests_per_second,\n            timeout_millis: timeout_millis,\n            clear_period: Duration::from_secs(clear_period_seconds),\n            last_clear: Instant::now()\n        }\n    }\n\n    pub fn check_clear(&mut self)\n    {\n        if self.last_clear.elapsed() > self.clear_period\n        {\n            self.requests_from.clear();\n            self.last_clear = Instant::now();\n        }\n    }\n\n    pub fn is_limited(&mut self, addr: SocketAddr, uri: &str) -> bool\n    {\n        let ip = addr.ip();\n        let ipv4: Ipv4Addr;\n    \n        match ip \n        {\n            IpAddr::V4(ip4) => {ipv4 = ip4}\n            IpAddr::V6(_ip6) => {return true}\n        }\n\n        let request = Request::new(ipv4, uri);\n\n        println!(\"{:?}\", request);\n    \n        let requests = if self.requests_from.contains_key(&request)\n        {\n            self.requests_from[&request].clone()\n        }\n        else \n        {\n            self.requests_from.insert(request.clone(), RequestData {count: 0 as u32, last_request_time: Instant::now(), timeout: false});\n            self.requests_from[&request].clone()\n        };\n\n        let time = requests.last_request_time.elapsed().as_millis();\n        let requests_per_second = requests.count as f64 / (time as f64 / 1000.0);\n\n        if requests.timeout || requests_per_second > self.max_requests_per_second\n        {\n            if time < self.timeout_millis\n            {\n                *self.requests_from.get_mut(&request).unwrap() = RequestData {count: requests.count, last_request_time: requests.last_request_time, timeout: true};\n                return true\n            }\n            else \n            {\n                *self.requests_from.get_mut(&request).unwrap() = RequestData {count: 0, last_request_time: Instant::now(), timeout: false};\n                return false\n            }\n        }\n\n        if time < 1000\n        {\n            *self.requests_from.get_mut(&request).unwrap() = RequestData {count: requests.count+1, last_request_time: requests.last_request_time, timeout: false};\n        }\n        else \n        {\n            *self.requests_from.get_mut(&request).unwrap() = RequestData {count: 0, last_request_time: Instant::now(), timeout: false};\n        }\n        return false\n    }\n}\n\npub async fn handle_throttle<B>\n(\n    ConnectInfo(addr): ConnectInfo<SocketAddr>,\n    State(state): State<Arc<Mutex<IpThrottler>>>,\n    request: http::Request<B>,\n    next: Next<B>\n) -> Result<Response, StatusCode>\n{\n    let serve_start = Instant::now();\n    {\n        let mut throttler = state.lock().await;\n        throttler.check_clear();\n        if throttler.is_limited(addr, &request.uri().to_string())\n        {\n            crate::debug(format!(\"Denying: {} @/{}\", addr, request.uri().to_string()), None);\n            crate::debug(format!(\"Serve time:               {} s\", serve_start.elapsed().as_secs_f64()), Some(\"PERFORMANCE\".to_string()));\n            Err(StatusCode::TOO_MANY_REQUESTS)\n        }\n        else \n        {\n            crate::debug(format!(\"Allowing: {} @/{}\", addr, request.uri().to_string()), None);\n            let response = next.run(request).await;\n            crate::debug(format!(\"Serve time:               {} s\", serve_start.elapsed().as_secs_f64()), Some(\"PERFORMANCE\".to_string()));\n            Ok(response)\n        }\n    }\n    \n}\n","traces":[{"line":24,"address":[3039429,3039104],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[3039376,3039179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[3039456],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3039486],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[3039536,3039824],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[3039607],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[3039626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[3039700],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3039856],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[3039870,3039957],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[3039926],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[3039936],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[3039968],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[3040014],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[3040024],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[3040053],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[3040257],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[3040061],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[3040158],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[3040232],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[3040445],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[3040292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[3040399],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[3040484],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[3040567],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[3040634],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[3040677],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[3041174],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[3041292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[3041048],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[3041159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[3040837,3040711,3040996],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[3040885,3041001,3040839],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[3040726],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[3040866],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[2916272],"length":1,"stats":{"Line":0},"fn_name":"handle_throttle<hyper::body::body::Body>"},{"line":139,"address":[2916818,2917001],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[2690367],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[2917470,2917563],"length":1,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[2920785,2917574],"length":1,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[2918962,2918720,2918832],"length":1,"stats":{"Line":0},"fn_name":null},{"line":146,"address":[2919333,2919467,2919794,2919254,2919781],"length":1,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[2919730],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[2917886,2918004,2918146],"length":1,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[2690393],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[2920257,2920336,2921173,2920470,2921183],"length":1,"stats":{"Line":0},"fn_name":null},{"line":154,"address":[2920733],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":48},{"path":["/","home","jerboa","Busser","tests","common","mod.rs"],"content":"","traces":[],"covered":0,"coverable":0}]}